<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameFramework</name>
    </assembly>
    <members>
        <member name="T:GameFramework.LoadType">
            <summary>
            加载方式。
            </summary>
        </member>
        <member name="F:GameFramework.LoadType.Text">
            <summary>
            按文本加载。
            </summary>
        </member>
        <member name="F:GameFramework.LoadType.Bytes">
            <summary>
            按二进制流加载。
            </summary>
        </member>
        <member name="F:GameFramework.LoadType.Stream">
            <summary>
            按二进制流加载。
            </summary>
        </member>
        <member name="T:GameFramework.BaseEventArgs">
            <summary>
            事件基类。
            </summary>
        </member>
        <member name="P:GameFramework.BaseEventArgs.Id">
            <summary>
            获取类型编号。
            </summary>
        </member>
        <member name="M:GameFramework.BaseEventArgs.Clear">
            <summary>
            清理引用。
            </summary>
        </member>
        <member name="T:GameFramework.EventPool`1">
            <summary>
            事件池。
            </summary>
            <typeparam name="T">事件类型。</typeparam>
        </member>
        <member name="M:GameFramework.EventPool`1.#ctor(GameFramework.EventPoolMode)">
            <summary>
            初始化事件池的新实例。
            </summary>
            <param name="mode">事件池模式。</param>
        </member>
        <member name="P:GameFramework.EventPool`1.EventHandlerCount">
            <summary>
            获取事件处理函数的数量。
            </summary>
        </member>
        <member name="P:GameFramework.EventPool`1.EventCount">
            <summary>
            获取事件数量。
            </summary>
        </member>
        <member name="M:GameFramework.EventPool`1.Update(System.Single,System.Single)">
            <summary>
            事件池轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.Shutdown">
            <summary>
            关闭并清理事件池。
            </summary>
        </member>
        <member name="M:GameFramework.EventPool`1.Clear">
            <summary>
            清理事件。
            </summary>
        </member>
        <member name="M:GameFramework.EventPool`1.Count(System.Int32)">
            <summary>
            获取事件处理函数的数量。
            </summary>
            <param name="id">事件类型编号。</param>
            <returns>事件处理函数的数量。</returns>
        </member>
        <member name="M:GameFramework.EventPool`1.Check(System.Int32,System.EventHandler{`0})">
            <summary>
            检查是否存在事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要检查的事件处理函数。</param>
            <returns>是否存在事件处理函数。</returns>
        </member>
        <member name="M:GameFramework.EventPool`1.Subscribe(System.Int32,System.EventHandler{`0})">
            <summary>
            订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.Unsubscribe(System.Int32,System.EventHandler{`0})">
            <summary>
            取消订阅事件处理函数。
            </summary>
            <param name="id">事件类型编号。</param>
            <param name="handler">要取消订阅的事件处理函数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.SetDefaultHandler(System.EventHandler{`0})">
            <summary>
            设置默认事件处理函数。
            </summary>
            <param name="handler">要设置的默认事件处理函数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.Fire(System.Object,`0)">
            <summary>
            抛出事件，这个操作是线程安全的，即使不在主线程中抛出，
            也可保证在主线程中回调事件处理函数，但事件会在抛出后的下一帧分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.FireNow(System.Object,`0)">
            <summary>
            抛出事件立即模式，这个操作不是线程安全的，事件会立刻分发。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:GameFramework.EventPool`1.HandleEvent(System.Object,`0)">
            <summary>
            处理事件结点。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:GameFramework.EventPool`1.Event">
            <summary>
            事件结点。
            </summary>
        </member>
        <member name="T:GameFramework.EventPoolMode">
            <summary>
            事件池模式。
            </summary>
        </member>
        <member name="F:GameFramework.EventPoolMode.Default">
            <summary>
            默认事件池模式，即必须存在有且只有一个事件处理函数。
            </summary>
        </member>
        <member name="F:GameFramework.EventPoolMode.AllowNoHandler">
            <summary>
            允许不存在事件处理函数。
            </summary>
        </member>
        <member name="F:GameFramework.EventPoolMode.AllowMultiHandler">
            <summary>
            允许存在多个事件处理函数。
            </summary>
        </member>
        <member name="F:GameFramework.EventPoolMode.AllowDuplicateHandler">
            <summary>
            允许存在重复的事件处理函数。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkAction">
            <summary>
            封装一个方法，该方法不具有参数并且不返回值。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`1">
            <summary>
            封装一个方法，该方法只有一个参数并且不返回值。
            </summary>
            <typeparam name="T">此委托封装的方法的参数类型。</typeparam>
            <param name="obj">此委托封装的方法的参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`2">
            <summary>
            封装一个方法，该方法具有两个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`3">
            <summary>
            封装一个方法，该方法具有三个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`4">
            <summary>
            封装一个方法，该方法具有四个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`5">
            <summary>
            封装一个方法，该方法具有五个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`6">
            <summary>
            封装一个方法，该方法具有六个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`7">
            <summary>
            封装一个方法，该方法具有七个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`8">
            <summary>
            封装一个方法，该方法具有八个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`9">
            <summary>
            封装一个方法，该方法具有九个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`10">
            <summary>
            封装一个方法，该方法具有十个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`11">
            <summary>
            封装一个方法，该方法具有十一个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`12">
            <summary>
            封装一个方法，该方法具有十二个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`13">
            <summary>
            封装一个方法，该方法具有十三个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`14">
            <summary>
            封装一个方法，该方法具有十四个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`15">
            <summary>
            封装一个方法，该方法具有十五个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
            <param name="arg15">此委托封装的方法的第十五个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkAction`16">
            <summary>
            封装一个方法，该方法具有十六个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
            <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
            <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
            <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
            <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
            <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
            <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
            <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
            <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
            <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
            <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
            <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
            <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
            <typeparam name="T16">此委托封装的方法的第十六个参数的类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
            <param name="arg4">此委托封装的方法的第四个参数。</param>
            <param name="arg5">此委托封装的方法的第五个参数。</param>
            <param name="arg6">此委托封装的方法的第六个参数。</param>
            <param name="arg7">此委托封装的方法的第七个参数。</param>
            <param name="arg8">此委托封装的方法的第八个参数。</param>
            <param name="arg9">此委托封装的方法的第九个参数。</param>
            <param name="arg10">此委托封装的方法的第十个参数。</param>
            <param name="arg11">此委托封装的方法的第十一个参数。</param>
            <param name="arg12">此委托封装的方法的第十二个参数。</param>
            <param name="arg13">此委托封装的方法的第十三个参数。</param>
            <param name="arg14">此委托封装的方法的第十四个参数。</param>
            <param name="arg15">此委托封装的方法的第十五个参数。</param>
            <param name="arg16">此委托封装的方法的第十六个参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkEntry">
            <summary>
            游戏框架入口。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.Update(System.Single,System.Single)">
            <summary>
            所有游戏框架模块轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.ShutDown">
            <summary>
            关闭游戏框架
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.GetModule``1">
            <summary>
            获取游戏框架模块。
            </summary>
            <typeparam name="T">要获取的游戏框架模块类型。</typeparam>
            <returns>要获取的游戏框架模块。</returns>
            <remarks>如果要获取的游戏框架模块不存在，则自动创建该游戏框架模块。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.GetModule(System.Type)">
            <summary>
            获取游戏框架模块。
            </summary>
            <param name="moduleType">要获取的游戏框架模块类型。</param>
            <returns>要获取的游戏框架模块。</returns>
            <remarks>如果要获取的游戏框架模块不存在，则自动创建该游戏框架模块。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkEntry.CreateModule(System.Type)">
            <summary>
            创建游戏框架模块。
            </summary>
            <param name="moduleType">要创建的游戏框架模块类型。</param>
            <returns>要创建的游戏框架模块。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkEventArgs">
            <summary>
            游戏框架中包含事件数据的类的基类。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkEventArgs.#ctor">
            <summary>
            初始化游戏框架中包含事件数据的类的新实例。
            </summary>
        </member>
        <member name="T:GameFramework.GameFrameworkException">
            <summary>
            游戏框架的异常类
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkException.#ctor">
            <summary>
            初始化游戏框架异常类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkException.#ctor(System.String)">
            <summary>
            使用指定错误消息初始化游戏框架异常类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和对作为此异常原因的内部异常的引用来初始化游戏框架异常类的新实例。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常。如果 innerException 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化游戏框架异常类的新实例。
            </summary>
            <param name="info">存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">包含有关源或目标的上下文信息。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkModule">
            <summary>
            游戏框架的抽象类
            </summary>
        </member>
        <member name="P:GameFramework.GameFrameworkModule.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkModule.Update(System.Single,System.Single)">
            <summary>
            游戏框架模块轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkModule.Shutdown">
            <summary>
            关闭并清理游戏框架模块。
            </summary>
        </member>
        <member name="T:GameFramework.Base.GameFrameworkSegment`1">
            <summary>
            初始化数据片段的新实例
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:GameFramework.Base.GameFrameworkSegment`1.#ctor(`0,System.Int32,System.Int32)">
            <summary>
            初始化数据片段的新实例。
            </summary>
            <param name="source">数据源。</param>
            <param name="offset">偏移。</param>
            <param name="length">长度。</param>
        </member>
        <member name="P:GameFramework.Base.GameFrameworkSegment`1.Source">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:GameFramework.Base.GameFrameworkSegment`1.Length">
            <summary>
            数据长度
            </summary>
        </member>
        <member name="P:GameFramework.Base.GameFrameworkSegment`1.Offset">
            <summary>
            数据偏移
            </summary>
        </member>
        <member name="M:GameFramework.Base.GameFrameworkSegment`1.GetHashCode">
            <summary>
            获取对象的哈希值。
            </summary>
            <returns>对象的哈希值。</returns>
        </member>
        <member name="M:GameFramework.Base.GameFrameworkSegment`1.Equals(System.Object)">
            <summary>
            比较对象是否与自身相等。
            </summary>
            <param name="obj">要比较的对象。</param>
            <returns>被比较的对象是否与自身相等。</returns>
        </member>
        <member name="M:GameFramework.Base.GameFrameworkSegment`1.Equals(GameFramework.Base.GameFrameworkSegment{`0})">
            <summary>
            比较对象是否与自身相等。
            </summary>
            <param name="obj">要比较的对象。</param>
            <returns>被比较的对象是否与自身相等。</returns>
        </member>
        <member name="M:GameFramework.Base.GameFrameworkSegment`1.op_Equality(GameFramework.Base.GameFrameworkSegment{`0},GameFramework.Base.GameFrameworkSegment{`0})">
            <summary>
            判断两个对象是否相等。
            </summary>
            <param name="a">值 a。</param>
            <param name="b">值 b。</param>
            <returns>两个对象是否相等。</returns>
        </member>
        <member name="M:GameFramework.Base.GameFrameworkSegment`1.op_Inequality(GameFramework.Base.GameFrameworkSegment{`0},GameFramework.Base.GameFrameworkSegment{`0})">
            <summary>
            判断两个对象是否不相等。
            </summary>
            <param name="a">值 a。</param>
            <param name="b">值 b。</param>
            <returns>两个对象是否不相等。</returns>
        </member>
        <member name="T:GameFramework.GameFrameworkLog">
            <summary>
            游戏框架日志类。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.SetLogHelper(GameFramework.GameFrameworkLog.ILogHelper)">
            <summary>
            设置游戏框架日志辅助器。
            </summary>
            <param name="logHelper">要设置的游戏框架日志辅助器。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Debug(System.Object)">
            <summary>
            记录调试级别日志，用于记录调试类日志信息。
            </summary>
            <param name="message">日志内容。</param>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Debug(System.String)">
            <summary>
            记录调试级别日志，用于记录调试类日志信息。
            </summary>
            <param name="message">日志内容。</param>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Debug(System.String,System.Object)">
            <summary>
            记录调试级别日志，用于记录调试类日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Debug(System.String,System.Object,System.Object)">
            <summary>
            记录调试级别日志，用于记录调试类日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            记录调试级别日志，用于记录调试类日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Debug(System.String,System.Object[])">
            <summary>
            记录调试级别日志，用于记录调试类日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Info(System.Object)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="message">日志内容</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Info(System.String)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="message">日志内容</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Info(System.String,System.Object)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Info(System.String,System.Object,System.Object)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Info(System.String,System.Object[])">
            <summary>
            打印信息级别日志，用于记录程序正常运行日志信息。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Warning(System.Object)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Warning(System.String)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Warning(System.String,System.Object)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Warning(System.String,System.Object,System.Object)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Warning(System.String,System.Object,System.Object,System.Object)">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Warning(System.String,System.Object[])">
            <summary>
            打印警告级别日志，建议在发生局部功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Error(System.Object)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Error(System.String)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Error(System.String,System.Object)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Error(System.String,System.Object,System.Object)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Error(System.String,System.Object[])">
            <summary>
            打印错误级别日志，建议在发生功能逻辑错误，但尚不会导致游戏崩溃或异常时使用。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Fatal(System.Object)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Fatal(System.String)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="message">日志内容。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Fatal(System.String,System.Object)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Fatal(System.String,System.Object,System.Object)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="format">日志格式。</param>
            <param name="arg0">日志参数 0。</param>
            <param name="arg1">日志参数 1。</param>
            <param name="arg2">日志参数 2。</param>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.Fatal(System.String,System.Object[])">
            <summary>
            打印严重错误级别日志，建议在发生严重错误，可能导致游戏崩溃或异常时使用，此时应尝试重启进程或重建游戏框架。
            </summary>
            <param name="format">日志格式。</param>
            <param name="args">日志参数。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkLog.ILogHelper">
            <summary>
            游戏框架日志辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.GameFrameworkLog.ILogHelper.Log(GameFramework.GameFrameworkLogLevel,System.Object)">
            <summary>
            记录日志。
            </summary>
            <param name="level">游戏框架日志等级。</param>
            <param name="message">日志内容。</param>
        </member>
        <member name="T:GameFramework.GameFrameworkLogLevel">
            <summary>
            游戏框架日志等级。
            </summary>
        </member>
        <member name="F:GameFramework.GameFrameworkLogLevel.Debug">
            <summary>
            调试。
            </summary>
        </member>
        <member name="F:GameFramework.GameFrameworkLogLevel.Info">
            <summary>
            信息。
            </summary>
        </member>
        <member name="F:GameFramework.GameFrameworkLogLevel.Warning">
            <summary>
            警告。
            </summary>
        </member>
        <member name="F:GameFramework.GameFrameworkLogLevel.Error">
            <summary>
            错误。
            </summary>
        </member>
        <member name="F:GameFramework.GameFrameworkLogLevel.Fatal">
            <summary>
            严重错误。
            </summary>
        </member>
        <member name="T:GameFramework.IReference">
            <summary>
            引用接口。
            </summary>
        </member>
        <member name="M:GameFramework.IReference.Clear">
            <summary>
            清理引用。
            </summary>
        </member>
        <member name="T:GameFramework.ReferencePool">
            <summary>
            引用池。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePool.Count">
            <summary>
            获取引用池的数量。
            </summary>
        </member>
        <member name="M:GameFramework.ReferencePool.GetAllReferencePoolInfos">
            <summary>
            获取所有引用池的信息。
            </summary>
            <returns>所有引用池的信息。</returns>
        </member>
        <member name="M:GameFramework.ReferencePool.ClearAll">
            <summary>
            清除所有引用池。
            </summary>
        </member>
        <member name="M:GameFramework.ReferencePool.Acquire``1">
            <summary>
            从引用池获取引用。
            </summary>
            <typeparam name="T">引用类型。</typeparam>
        </member>
        <member name="M:GameFramework.ReferencePool.Acquire(System.Type)">
            <summary>
            从引用池获取引用。
            </summary>
            <param name="referenceType">引用类型。</param>
            <returns></returns>
        </member>
        <member name="M:GameFramework.ReferencePool.Release``1(``0)">
            <summary>
            将引用归还引用池。
            </summary>
            <typeparam name="T">引用类型。</typeparam>
            <param name="reference">引用。</param>
        </member>
        <member name="M:GameFramework.ReferencePool.Release(GameFramework.IReference)">
            <summary>
            将引用归还引用池。
            </summary>
            <param name="reference">引用。</param>
        </member>
        <member name="M:GameFramework.ReferencePool.Add``1(System.Int32)">
            <summary>
            向引用池中追加指定数量的引用。
            </summary>
            <typeparam name="T">引用类型。</typeparam>
            <param name="count">追加数量。</param>
        </member>
        <member name="M:GameFramework.ReferencePool.Add(System.Type,System.Int32)">
            <summary>
            向引用池中追加指定数量的引用。
            </summary>
            <param name="referenceType">引用类型。</param>
            <param name="count">追加数量。</param>
        </member>
        <member name="M:GameFramework.ReferencePool.Remove``1(System.Int32)">
            <summary>
            从引用池中移除指定数量的引用。
            </summary>
            <typeparam name="T">引用类型。</typeparam>
            <param name="count">移除数量。</param>
        </member>
        <member name="M:GameFramework.ReferencePool.Remove(System.Type,System.Int32)">
            <summary>
            从引用池中移除指定数量的引用。
            </summary>
            <param name="referenceType">引用类型。</param>
            <param name="count">移除数量。</param>
        </member>
        <member name="M:GameFramework.ReferencePool.RemoveAll``1">
            <summary>
            从引用池中移除所有的引用。
            </summary>
            <typeparam name="T">引用类型。</typeparam>
        </member>
        <member name="M:GameFramework.ReferencePool.RemoveAll(System.Type)">
            <summary>
            从引用池中移除所有的引用。
            </summary>
            <param name="referenceType">引用类型。</param>
        </member>
        <member name="T:GameFramework.ReferencePool.ReferenceCollection">
            <summary>
            引用收集
            </summary>
        </member>
        <member name="M:GameFramework.ReferencePool.ReferenceCollection.#ctor(System.Type)">
            <summary>
            引用收集的初始化构造器
            </summary>
            <param name="referenceType"></param>
        </member>
        <member name="P:GameFramework.ReferencePool.ReferenceCollection.ReferenceType">
            <summary>
            引用类型
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePool.ReferenceCollection.UnusedReferenceCount">
            <summary>
            不使用的引用数量
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePool.ReferenceCollection.UsingReferenceCount">
            <summary>
            使用中的引用总数
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePool.ReferenceCollection.AcquireReferenceCount">
            <summary>
            获取引用计数
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePool.ReferenceCollection.ReleaseReferenceCount">
            <summary>
            释放引用计数
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePool.ReferenceCollection.AddReferenceCount">
            <summary>
            添加引用计数
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePool.ReferenceCollection.RemoveReferenceCount">
            <summary>
            移除引用计数
            </summary>
        </member>
        <member name="M:GameFramework.ReferencePool.ReferenceCollection.Acquire``1">
            <summary>
            获取引用
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GameFramework.ReferencePool.ReferenceCollection.Acquire">
            <summary>
            获取引用
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameFramework.ReferencePool.ReferenceCollection.Release(GameFramework.IReference)">
            <summary>
            释放引用
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:GameFramework.ReferencePool.ReferenceCollection.Add``1(System.Int32)">
            <summary>
            添加引用
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="count">数量</param>
        </member>
        <member name="M:GameFramework.ReferencePool.ReferenceCollection.Add(System.Int32)">
            <summary>
            添加引用
            </summary>
            <param name="count">数量</param>
        </member>
        <member name="M:GameFramework.ReferencePool.ReferenceCollection.Remove(System.Int32)">
            <summary>
            移除引用
            </summary>
            <param name="count">数量</param>
        </member>
        <member name="M:GameFramework.ReferencePool.ReferenceCollection.RemoveAll">
            <summary>
            移除所有引用
            </summary>
        </member>
        <member name="T:GameFramework.ReferencePoolInfo">
            <summary>
            引用池信息。
            </summary>
        </member>
        <member name="M:GameFramework.ReferencePoolInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化引用池信息的新实例。
            </summary>
            <param name="typeName">引用池类型名称。</param>
            <param name="unusedReferenceCount">未使用引用数量。</param>
            <param name="usingReferenceCount">正在使用引用数量。</param>
            <param name="acquireReferenceCount">获取引用数量。</param>
            <param name="releaseReferenceCount">归还引用数量。</param>
            <param name="addReferenceCount">增加引用数量。</param>
            <param name="removeReferenceCount">移除引用数量。</param>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.TypeName">
            <summary>
            获取引用池类型名称。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.UnusedReferenceCount">
            <summary>
            获取未使用引用数量。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.UsingReferenceCount">
            <summary>
            获取正在使用引用数量。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.AcquireReferenceCount">
            <summary>
            获取获取引用数量。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.ReleaseReferenceCount">
            <summary>
            获取归还引用数量。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.AddReferenceCount">
            <summary>
            获取增加引用数量。
            </summary>
        </member>
        <member name="P:GameFramework.ReferencePoolInfo.RemoveReferenceCount">
            <summary>
            获取移除引用数量。
            </summary>
        </member>
        <member name="T:GameFramework.ITask">
            <summary>
            任务接口。
            </summary>
        </member>
        <member name="P:GameFramework.ITask.SerialId">
            <summary>
            获取任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.ITask.Priority">
            <summary>
            获取任务的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.ITask.Done">
            <summary>
            获取任务是否完成。
            </summary>
        </member>
        <member name="T:GameFramework.ITaskAgent`1">
            <summary>
            任务代理接口。
            </summary>
            <typeparam name="T">任务类型。</typeparam>
        </member>
        <member name="P:GameFramework.ITaskAgent`1.Task">
            <summary>
            获取任务。
            </summary>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Initialize">
            <summary>
            初始化任务代理。
            </summary>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Update(System.Single,System.Single)">
            <summary>
            任务代理轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.ShutDown">
            <summary>
            关闭并清理任务代理。
            </summary>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Start(`0)">
            <summary>
            开始处理任务。
            </summary>
            <param name="task">要处理的任务。</param>
        </member>
        <member name="M:GameFramework.ITaskAgent`1.Reset">
            <summary>
            停止正在处理的任务并重置任务代理。
            </summary>
        </member>
        <member name="T:GameFramework.TaskPool`1">
            <summary>
            任务池。
            </summary>
            <typeparam name="T">任务类型。</typeparam>
        </member>
        <member name="M:GameFramework.TaskPool`1.#ctor">
            <summary>
            初始化任务池的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.TaskPool`1.TotalAgentCount">
            <summary>
            获取任务代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.TaskPool`1.FreeAgentCount">
            <summary>
            获取可用任务代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.TaskPool`1.WorkingAgentCount">
            <summary>
            获取工作中任务代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.TaskPool`1.WaitingTaskCount">
            <summary>
            获取等待任务数量。
            </summary>
        </member>
        <member name="M:GameFramework.TaskPool`1.Update(System.Single,System.Single)">
            <summary>
            任务池轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.TaskPool`1.Shutdown">
            <summary>
            关闭并清理任务池。
            </summary>
        </member>
        <member name="M:GameFramework.TaskPool`1.AddAgent(GameFramework.ITaskAgent{`0})">
            <summary>
            增加任务代理。
            </summary>
            <param name="agent">要增加的任务代理。</param>
        </member>
        <member name="M:GameFramework.TaskPool`1.AddTask(`0)">
            <summary>
            增加任务。
            </summary>
            <param name="task">要增加的任务。</param>
        </member>
        <member name="M:GameFramework.TaskPool`1.RemoveTask(System.Int32)">
            <summary>
            移除任务。
            </summary>
            <param name="serialId">要移除任务的序列编号。</param>
            <returns>被移除的任务。</returns>
        </member>
        <member name="M:GameFramework.TaskPool`1.RemoveAllTasks">
            <summary>
            移除所有任务。
            </summary>
        </member>
        <member name="T:GameFramework.Variable`1">
            <summary>
            变量。
            </summary>
            <typeparam name="T">变量类型。</typeparam>
        </member>
        <member name="M:GameFramework.Variable`1.#ctor">
            <summary>
            初始化变量的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Variable`1.#ctor(`0)">
            <summary>
            初始化变量的新实例。
            </summary>
            <param name="value">初始值。</param>
        </member>
        <member name="P:GameFramework.Variable`1.Type">
            <summary>
            获取变量类型。
            </summary>
        </member>
        <member name="P:GameFramework.Variable`1.Value">
            <summary>
            获取或设置变量值。
            </summary>
        </member>
        <member name="M:GameFramework.Variable`1.GetValue">
            <summary>
            获取变量值。
            </summary>
            <returns>变量值。</returns>
        </member>
        <member name="M:GameFramework.Variable`1.SetValue(System.Object)">
            <summary>
            设置变量值。
            </summary>
            <param name="value">变量值。</param>
        </member>
        <member name="M:GameFramework.Variable`1.Reset">
            <summary>
            重置变量值。
            </summary>
        </member>
        <member name="M:GameFramework.Variable`1.ToString">
            <summary>
            获取变量字符串。
            </summary>
            <returns>变量字符串。</returns>
        </member>
        <member name="T:GameFramework.Variable">
            <summary>
            变量。
            </summary>
        </member>
        <member name="M:GameFramework.Variable.#ctor">
            <summary>
            初始化变量的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Variable.Type">
            <summary>
            获取变量类型。
            </summary>
        </member>
        <member name="M:GameFramework.Variable.GetValue">
            <summary>
            获取变量值。
            </summary>
            <returns>变量值。</returns>
        </member>
        <member name="M:GameFramework.Variable.SetValue(System.Object)">
            <summary>
            设置变量值。
            </summary>
            <param name="value">变量值。</param>
        </member>
        <member name="M:GameFramework.Variable.Reset">
            <summary>
            重置变量值。
            </summary>
        </member>
        <member name="T:GameFramework.Version">
            <summary>
            版本号类。
            </summary>
        </member>
        <member name="P:GameFramework.Version.GameFrameworkVersion">
            <summary>
            获取游戏框架版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Version.GameVersion">
            <summary>
            获取游戏版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Version.InternalGameVersion">
            <summary>
            获取内部游戏版本号。
            </summary>
        </member>
        <member name="M:GameFramework.Version.SetVersionHelper(GameFramework.Version.IVersionHelper)">
            <summary>
            设置版本号辅助器。
            </summary>
            <param name="versionHelper">要设置的版本号辅助器。</param>
        </member>
        <member name="T:GameFramework.Version.IVersionHelper">
            <summary>
            版本号辅助器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Version.IVersionHelper.GameVersion">
            <summary>
            获取游戏版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Version.IVersionHelper.InternalGameVersion">
            <summary>
            获取内部游戏版本号。
            </summary>
        </member>
        <member name="T:GameFramework.Download.Constant">
            <summary>
            下载相关常量。
            </summary>
        </member>
        <member name="F:GameFramework.Download.Constant.DefaultPriority">
            <summary>
            默认下载任务优先级。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadAgentHelperCompleteEventArgs">
            <summary>
             下载代理辅助器完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperCompleteEventArgs.#ctor(System.Int32,System.Byte[])">
            <summary>
            初始化下载代理辅助器完成事件的新实例。
            </summary>
            <param name="length">下载的数据大小。</param>
            <param name="bytes">下载的数据流。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadAgentHelperCompleteEventArgs.Length">
            <summary>
            获取下载的数据大小。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperCompleteEventArgs.GetBytes">
            <summary>
            获取下载的数据流。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadAgentHelperErrorEventArgs">
            <summary>
             下载代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperErrorEventArgs.#ctor(System.String)">
            <summary>
            初始化下载代理辅助器错误事件的新实例。
            </summary>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadAgentHelperErrorEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadAgentHelperUpdateEventArgs">
            <summary>
             下载代理辅助器更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperUpdateEventArgs.#ctor(System.Int32,System.Byte[])">
            <summary>
            初始化下载代理辅助器更新事件的新实例。
            </summary>
            <param name="length">下载的数据大小。</param>
            <param name="bytes">下载的数据流。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadAgentHelperUpdateEventArgs.Length">
            <summary>
            获取下载的数据大小。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadAgentHelperUpdateEventArgs.GetBytes">
            <summary>
            获取下载的数据流。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadFailureEventArgs">
            <summary>
            下载失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadFailureEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.Object)">
            <summary>
            初始化下载失败事件的新实例。
            </summary>
            <param name="serialId">下载任务的序列编号。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadFailureEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadManager">
            <summary>
            下载管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.#ctor">
            <summary>
            初始化下载管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.TotalAgentCount">
            <summary>
            获取下载代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.FreeAgentCount">
            <summary>
            获取可用下载代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.WorkingAgentCount">
            <summary>
            获取工作中下载代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.WaitingTaskCount">
            <summary>
            获取等待下载任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.FlushSize">
            <summary>
            获取或设置将缓冲区写入磁盘的临界大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.Timeout">
            <summary>
            获取或设置下载超时时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.CurrentSpeed">
            <summary>
            获取当前下载速度。
            </summary>
        </member>
        <member name="E:GameFramework.Download.DownloadManager.DownloadStart">
            <summary>
            下载开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.DownloadManager.DownloadUpdate">
            <summary>
            下载更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.DownloadManager.DownloadSuccess">
            <summary>
            下载成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.DownloadManager.DownloadFailure">
            <summary>
            下载失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.Update(System.Single,System.Single)">
            <summary>
            下载管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.Shutdown">
            <summary>
            关闭并清理下载管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.AddDownloadAgentHelper(GameFramework.Download.IDownloadAgentHelper)">
            <summary>
            增加下载代理辅助器。
            </summary>
            <param name="downloadAgentHelper">要增加的下载代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.AddDownload(System.String,System.String)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.AddDownload(System.String,System.String,System.Int32)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="priority">下载任务的优先级。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.AddDownload(System.String,System.String,System.Object)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.AddDownload(System.String,System.String,System.Int32,System.Object)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="priority">下载任务的优先级。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.RemoveDownload(System.Int32)">
            <summary>
            移除下载任务。
            </summary>
            <param name="serialId">要移除下载任务的序列编号。</param>
            <returns>是否移除下载任务成功。</returns>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.RemoveAllDownload">
            <summary>
            移除所有下载任务。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadManager.DownloadAgent">
            <summary>
            下载代理。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.#ctor(GameFramework.Download.IDownloadAgentHelper)">
            <summary>
            初始化下载代理的新实例。
            </summary>
            <param name="downloadAgentHelper">下载代理辅助器。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.Task">
            <summary>
            获取下载任务。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.WaitTime">
            <summary>
            获取已经等待时间。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.StartLength">
            <summary>
            获取开始下载时已经存在的大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.DownloadedLength">
            <summary>
            获取本次已经下载的大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.CurrentLength">
            <summary>
            获取当前的大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadAgent.SavedLength">
            <summary>
            获取已经存盘的大小。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Initialize">
            <summary>
            初始化下载代理。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Update(System.Single,System.Single)">
            <summary>
            下载代理轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Shutdown">
            <summary>
            关闭并清理下载代理。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Start(GameFramework.Download.DownloadManager.DownloadTask)">
            <summary>
            开始处理下载任务。
            </summary>
            <param name="task">要处理的下载任务。</param>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Reset">
            <summary>
            重置下载代理。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadAgent.Dispose(System.Boolean)">
            <summary>
            释放资源。
            </summary>
            <param name="disposing">释放资源标记。</param>
        </member>
        <member name="T:GameFramework.Download.DownloadManager.DownloadTask">
            <summary>
            下载任务。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadManager.DownloadTask.#ctor(System.String,System.String,System.Int32,System.Int32,System.Single,System.Object)">
            <summary>
            初始化下载任务的新实例。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="priority">下载任务的优先级。</param>
            <param name="flushSize">将缓冲区写入磁盘的临界大小。</param>
            <param name="timeout">下载超时时长，以秒为单位。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.Priority">
            <summary>
            获取下载任务的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.Done">
            <summary>
            获取或设置下载任务是否完成。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.Status">
            <summary>
            获取或设置下载任务的状态。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.DownloadUri">
            <summary>
            获取原始下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.FlushSize">
            <summary>
            获取将缓冲区写入磁盘的临界大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.Timeout">
            <summary>
            获取下载超时时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadManager.DownloadTask.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadManager.DownloadTaskStatus">
            <summary>
            下载任务的状态。
            </summary>
        </member>
        <member name="F:GameFramework.Download.DownloadManager.DownloadTaskStatus.Todo">
            <summary>
            准备下载。
            </summary>
        </member>
        <member name="F:GameFramework.Download.DownloadManager.DownloadTaskStatus.Doing">
            <summary>
            下载中。
            </summary>
        </member>
        <member name="F:GameFramework.Download.DownloadManager.DownloadTaskStatus.Done">
            <summary>
            下载完成。
            </summary>
        </member>
        <member name="F:GameFramework.Download.DownloadManager.DownloadTaskStatus.Error">
            <summary>
            下载错误。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadStartEventArgs">
            <summary>
            下载开始事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadStartEventArgs.#ctor(System.Int32,System.String,System.String,System.Int32,System.Object)">
            <summary>
            初始化下载开始事件的新实例。
            </summary>
            <param name="serialId">下载任务的序列编号。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="currentLength">当前大小。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.CurrentLength">
            <summary>
            获取当前大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadStartEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadSuccessEventArgs">
            <summary>
            下载成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadSuccessEventArgs.#ctor(System.Int32,System.String,System.String,System.Int32,System.Object)">
            <summary>
            初始化下载成功事件的新实例。
            </summary>
            <param name="serialId">下载任务的序列编号。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="currentLength">当前大小。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.CurrentLength">
            <summary>
            获取当前大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadSuccessEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Download.DownloadUpdateEventArgs">
            <summary>
            下载更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.DownloadUpdateEventArgs.#ctor(System.Int32,System.String,System.String,System.Int32,System.Object)">
            <summary>
            初始化下载更新事件的新实例。
            </summary>
            <param name="serialId">下载任务的序列编号。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="currentLength">当前大小。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.SerialId">
            <summary>
            获取下载任务的序列编号。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.CurrentLength">
            <summary>
            获取当前大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.DownloadUpdateEventArgs.UserData">
            <summary>
            获取用户自定义数据。
            </summary>
        </member>
        <member name="T:GameFramework.Download.IDownloadAgentHelper">
            <summary>
            下载代理辅助器接口。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadAgentHelper.DownloadAgentHelperUpdate">
            <summary>
            下载代理辅助器更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadAgentHelper.DownloadAgentHelperComplete">
            <summary>
            下载代理辅助器完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadAgentHelper.DownloadAgentHelperError">
            <summary>
            下载代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.IDownloadAgentHelper.Download(System.String,System.Object)">
            <summary>
            通过下载代理辅助器下载指定地址的数据。
            </summary>
            <param name="downloadUri">下载地址。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Download.IDownloadAgentHelper.Download(System.String,System.Int32,System.Object)">
            <summary>
            通过下载代理辅助器下载指定地址的数据。
            </summary>
            <param name="downloadUri">下载地址。</param>
            <param name="fromPosition">下载数据起始位置。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Download.IDownloadAgentHelper.Download(System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            通过下载代理辅助器下载指定地址的数据。
            </summary>
            <param name="downloadUri">下载地址。</param>
            <param name="fromPosition">下载数据起始位置。</param>
            <param name="toPosition">下载数据结束位置。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Download.IDownloadAgentHelper.Reset">
            <summary>
            重置下载代理辅助器。
            </summary>
        </member>
        <member name="T:GameFramework.Download.IDownloadManager">
            <summary>
            下载管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.TotalAgentCount">
            <summary>
            获取下载代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.FreeAgentCount">
            <summary>
            获取可用下载代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.WorkingAgentCount">
            <summary>
            获取工作中下载代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.WaitingTaskCount">
            <summary>
            获取等待下载任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.FlushSize">
            <summary>
            获取或设置将缓冲区写入磁盘的临界大小。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.Timeout">
            <summary>
            获取或设置下载超时时长，以秒为单位。
            </summary>
        </member>
        <member name="P:GameFramework.Download.IDownloadManager.CurrentSpeed">
            <summary>
            获取当前下载速度。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadManager.DownloadStart">
            <summary>
            下载开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadManager.DownloadUpdate">
            <summary>
            下载更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadManager.DownloadSuccess">
            <summary>
            下载成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Download.IDownloadManager.DownloadFailure">
            <summary>
            下载失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.AddDownloadAgentHelper(GameFramework.Download.IDownloadAgentHelper)">
            <summary>
            增加下载代理辅助器。
            </summary>
            <param name="downloadAgentHelper">要增加的下载代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.AddDownload(System.String,System.String)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.AddDownload(System.String,System.String,System.Int32)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="priority">下载任务的优先级。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.AddDownload(System.String,System.String,System.Object)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.AddDownload(System.String,System.String,System.Int32,System.Object)">
            <summary>
            增加下载任务。
            </summary>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">原始下载地址。</param>
            <param name="priority">下载任务的优先级。</param>
            <param name="userData">用户自定义数据。</param>
            <returns>新增下载任务的序列编号。</returns>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.RemoveDownload(System.Int32)">
            <summary>
            移除下载任务。
            </summary>
            <param name="serialId">要移除下载任务的序列编号。</param>
            <returns>是否移除下载任务成功。</returns>
        </member>
        <member name="M:GameFramework.Download.IDownloadManager.RemoveAllDownload">
            <summary>
            移除所有下载任务。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.IObjectPool`1">
            <summary>
            对象池接口。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.Name">
            <summary>
            获取对象池名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.FullName">
            <summary>
            获取对象池完整名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.ObjectType">
            <summary>
            获取对象池对象类型。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.Count">
            <summary>
            获取对象池中对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.CanReleaseCount">
            <summary>
            获取对象池中能被释放的对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.AllowMultiSpawn">
            <summary>
            获取是否允许对象被多次获取。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.AutoReleaseInterval">
            <summary>
            获取或设置对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.Capacity">
            <summary>
            获取或设置对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.ExpireTime">
            <summary>
            获取或设置对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPool`1.Priority">
            <summary>
            获取或设置对象池的优先级。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Register(`0,System.Boolean)">
            <summary>
            创建对象。
            </summary>
            <param name="obj">对象。</param>
            <param name="spawned">对象是否已被获取。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.CanSpawn">
            <summary>
            检查对象。
            </summary>
            <returns>要检查的对象是否存在。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.CanSpawn(System.String)">
            <summary>
            检查对象。
            </summary>
            <param name="name">对象名称。</param>
            <returns>要检查的对象是否存在。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Spawn">
            <summary>
            获取对象。
            </summary>
            <returns>要获取的对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Spawn(System.String)">
            <summary>
            获取对象。
            </summary>
            <param name="name">对象名称。</param>
            <returns>要获取的对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Unspawn(`0)">
            <summary>
            回收对象。
            </summary>
            <param name="obj">要回收的内部对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Unspawn(System.Object)">
            <summary>
            回收对象。
            </summary>
            <param name="target">要回收的对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.SetLocked(`0,System.Boolean)">
            <summary>
            设置对象是否被加锁。
            </summary>
            <param name="obj">要设置被加锁的内部对象。</param>
            <param name="locked">是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.SetLocked(System.Object,System.Boolean)">
            <summary>
            设置对象是否被加锁。
            </summary>
            <param name="target">要设置被加锁的对象。</param>
            <param name="locked">是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.SetPriority(`0,System.Int32)">
            <summary>
            设置对象的优先级。
            </summary>
            <param name="obj">要设置优先级的内部对象。</param>
            <param name="priority">优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.SetPriority(System.Object,System.Int32)">
            <summary>
            设置对象的优先级。
            </summary>
            <param name="target">要设置优先级的对象。</param>
            <param name="priority">优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Release(System.Int32)">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Release(GameFramework.ObjectPool.ReleaseObjectFilterCallback{`0})">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="releaseObjectFilterCallback">释放对象筛选函数。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.Release(System.Int32,GameFramework.ObjectPool.ReleaseObjectFilterCallback{`0})">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
            <param name="releaseObjectFilterCallback">释放对象筛选函数。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPool`1.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.IObjectPoolManager">
            <summary>
            对象池管理器。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.IObjectPoolManager.Count">
            <summary>
            获取对象池数量。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.HasObjectPool``1">
            <summary>
            检查是否存在对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.HasObjectPool(System.Type)">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.HasObjectPool``1(System.String)">
            <summary>
            检查是否存在对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.HasObjectPool(System.Type,System.String)">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.HasObjectPool(System.String)">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="fullName">对象池完整名称。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.HasObjectPool(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPool``1">
            <summary>
            获取对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPool(System.Type)">
            <summary>
            获取对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPool``1(System.String)">
            <summary>
            获取对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPool(System.Type,System.String)">
            <summary>
            获取对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPool(System.String)">
            <summary>
            获取对象池。
            </summary>
            <param name="fullName">对象池完整名称。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPool(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPools(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetObjectPools(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase},System.Collections.Generic.List{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <param name="results">要获取的对象池。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetAllObjectPools">
            <summary>
            获取所有对象池。
            </summary>
            <returns>所有对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetAllObjectPools(System.Collections.Generic.List{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取所有对象池。
            </summary>
            <param name="results">所有对象池。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetAllObjectPools(System.Boolean)">
            <summary>
            获取所有对象池。
            </summary>
            <param name="sort">是否根据对象池的优先级排序。</param>
            <returns>所有对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.GetAllObjectPools(System.Boolean,System.Collections.Generic.List{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取所有对象池。
            </summary>
            <param name="sort">是否根据对象池的优先级排序。</param>
            <param name="results">所有对象池。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool``1">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool(System.Type)">
            <summary>
            销毁对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool``1(System.String)">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">要销毁的对象池名称。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool(System.Type,System.String)">
            <summary>
            销毁对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">要销毁的对象池名称。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool``1(GameFramework.ObjectPool.IObjectPool{``0})">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="objectPool">要销毁的对象池。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.DestroyObjectPool(GameFramework.ObjectPool.ObjectPoolBase)">
            <summary>
            销毁对象池。
            </summary>
            <param name="objectPool">要销毁的对象池。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.IObjectPoolManager.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectBase">
            <summary>
            对象基类。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.#ctor(System.Object)">
            <summary>
            初始化对象基类的新实例。
            </summary>
            <param name="target">对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.#ctor(System.String,System.Object)">
            <summary>
            初始化对象的新实例。
            </summary>
            <param name="name">对象名称。</param>
            <param name="target">对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            初始化对象的新实例。
            </summary>
            <param name="name">对象名称。</param>
            <param name="target">对象。</param>
            <param name="locked">对象是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            初始化对象的新实例。
            </summary>
            <param name="name">对象名称。</param>
            <param name="target">对象。</param>
            <param name="priority">对象的优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.#ctor(System.String,System.Object,System.Boolean,System.Int32)">
            <summary>
            初始化对象的新实例。
            </summary>
            <param name="name">对象名称。</param>
            <param name="target">对象。</param>
            <param name="locked">对象是否被加锁。</param>
            <param name="priority">对象的优先级。</param>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.Name">
            <summary>
            获取对象名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.Target">
            <summary>
            获取对象。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.Locked">
            <summary>
            获取或设置对象是否被加锁。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.Priority">
            <summary>
            获取或设置对象的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.CustomCanReleaseFlag">
            <summary>
            获取自定义释放检查标记。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectBase.LastUseTime">
            <summary>
            获取对象上次使用时间。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.OnSpawn">
            <summary>
            获取对象时的事件。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.OnUnspawn">
            <summary>
            回收对象时的事件。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectBase.Release(System.Boolean)">
            <summary>
            释放对象。
            </summary>
            <param name="isShutdown">是否是关闭对象池时触发。</param>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectInfo">
            <summary>
            对象信息。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectInfo.#ctor(System.String,System.Boolean,System.Boolean,System.Int32,System.DateTime,System.Int32)">
            <summary>
            初始化对象信息的新实例。
            </summary>
            <param name="name">对象名称。</param>
            <param name="locked">对象是否被加锁。</param>
            <param name="customCanReleaseFlag">对象自定义释放检查标记。</param>
            <param name="priority">对象的优先级。</param>
            <param name="lastUseTime">对象上次使用时间。</param>
            <param name="spawnCount">对象的获取计数。</param>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.Name">
            <summary>
            获取对象名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.Locked">
            <summary>
            获取对象是否被加锁。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.CustomCanReleaseFlag">
            <summary>
            获取对象自定义释放检查标记。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.Priority">
            <summary>
            获取对象的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.LastUseTime">
            <summary>
            获取对象上次使用时间。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.IsInUse">
            <summary>
            获取对象是否正在使用。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectInfo.SpawnCount">
            <summary>
            获取对象的获取计数。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectPoolBase">
            <summary>
            对象池基类。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.#ctor">
            <summary>
            初始化对象池基类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.#ctor(System.String)">
            <summary>
            初始化对象池基类的新实例。
            </summary>
            <param name="name">对象池名称。</param>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.Name">
            <summary>
            获取对象池名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.FullName">
            <summary>
            获取对象池完整名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.ObjectType">
            <summary>
            获取对象池对象类型。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.Count">
            <summary>
            获取对象池中对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.CanReleaseCount">
            <summary>
            获取对象池中能被释放的对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.AllowMultiSpawn">
            <summary>
            获取是否允许对象被多次获取。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.AutoReleaseInterval">
            <summary>
            获取或设置对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.Capacity">
            <summary>
            获取或设置对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.ExpireTime">
            <summary>
            获取或设置对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolBase.Priority">
            <summary>
            获取或设置对象池的优先级。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.Release(System.Int32)">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolBase.GetAllObjectInfos">
            <summary>
            获取所有对象信息。
            </summary>
            <returns>所有对象信息。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.#ctor">
            <summary>
            初始化对象池管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Count">
            <summary>
            获取对象池数量。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Update(System.Single,System.Single)">
            <summary>
            对象池管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Shutdown">
            <summary>
            关闭并清理对象池管理器。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.HasObjectPool``1">
            <summary>
            检查是否存在对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.HasObjectPool(System.Type)">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.HasObjectPool``1(System.String)">
            <summary>
            检查是否存在对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.HasObjectPool(System.Type,System.String)">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.HasObjectPool(System.String)">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="fullName">对象池完整名称。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.HasObjectPool(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            检查是否存在对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>是否存在对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPool``1">
            <summary>
            获取对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPool(System.Type)">
            <summary>
            获取对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPool``1(System.String)">
            <summary>
            获取对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPool(System.Type,System.String)">
            <summary>
            获取对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPool(System.String)">
            <summary>
            获取对象池。
            </summary>
            <param name="fullName">对象池完整名称。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPool(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPools(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <returns>要获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetObjectPools(System.Predicate{GameFramework.ObjectPool.ObjectPoolBase},System.Collections.Generic.List{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取对象池。
            </summary>
            <param name="condition">要检查的条件。</param>
            <param name="results">要获取的对象池。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetAllObjectPools">
            <summary>
            获取所有对象池。
            </summary>
            <returns>所有对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetAllObjectPools(System.Collections.Generic.List{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取所有对象池。
            </summary>
            <param name="results">所有对象池。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetAllObjectPools(System.Boolean)">
            <summary>
            获取所有对象池。
            </summary>
            <param name="sort">是否根据对象池的优先级排序。</param>
            <returns>所有对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.GetAllObjectPools(System.Boolean,System.Collections.Generic.List{GameFramework.ObjectPool.ObjectPoolBase})">
            <summary>
            获取所有对象池。
            </summary>
            <param name="sort">是否根据对象池的优先级排序。</param>
            <param name="results">所有对象池。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32,System.Single)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool``1(System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateSingleSpawnObjectPool(System.Type,System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许单次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许单次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32,System.Single)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool``1(System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.CreateMultiSpawnObjectPool(System.Type,System.String,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            创建允许多次获取的对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">对象池名称。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
            <returns>要创建的允许多次获取的对象池。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool``1">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool(System.Type)">
            <summary>
            销毁对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool``1(System.String)">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="name">要销毁的对象池名称。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool(System.Type,System.String)">
            <summary>
            销毁对象池。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="name">要销毁的对象池名称。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool``1(GameFramework.ObjectPool.IObjectPool{``0})">
            <summary>
            销毁对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="objectPool">要销毁的对象池。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.DestroyObjectPool(GameFramework.ObjectPool.ObjectPoolBase)">
            <summary>
            销毁对象池。
            </summary>
            <param name="objectPool">要销毁的对象池。</param>
            <returns>是否销毁对象池成功。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1">
            <summary>
            对象池。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.#ctor(System.String,System.Boolean,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            初始化对象池的新实例。
            </summary>
            <param name="name">对象池名称。</param>
            <param name="allowMultiSpawn">是否允许对象被多次获取。</param>
            <param name="autoReleaseInterval">对象池自动释放可释放对象的间隔秒数。</param>
            <param name="capacity">对象池的容量。</param>
            <param name="expireTime">对象池对象过期秒数。</param>
            <param name="priority">对象池的优先级。</param>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.ObjectType">
            <summary>
            获取对象池对象类型。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Count">
            <summary>
            获取对象池中对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.CanReleaseCount">
            <summary>
            获取对象池中能被释放的对象的数量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.AllowMultiSpawn">
            <summary>
            获取是否允许对象被多次获取。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.AutoReleaseInterval">
            <summary>
            获取或设置对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Capacity">
            <summary>
            获取或设置对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.ExpireTime">
            <summary>
            获取或设置对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Priority">
            <summary>
            获取或设置对象池的优先级。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Register(`0,System.Boolean)">
            <summary>
            创建对象。
            </summary>
            <param name="obj">对象。</param>
            <param name="spawned">对象是否已被获取。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.CanSpawn">
            <summary>
            检查对象。
            </summary>
            <returns>要检查的对象是否存在。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.CanSpawn(System.String)">
            <summary>
            检查对象。
            </summary>
            <param name="name">对象名称。</param>
            <returns>要检查的对象是否存在。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Spawn">
            <summary>
            获取对象。
            </summary>
            <returns>要获取的对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Spawn(System.String)">
            <summary>
            获取对象。
            </summary>
            <param name="name">对象名称。</param>
            <returns>要获取的对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Unspawn(`0)">
            <summary>
            回收对象。
            </summary>
            <param name="obj">要回收的内部对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Unspawn(System.Object)">
            <summary>
            回收对象。
            </summary>
            <param name="target">要回收的对象。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.SetLocked(`0,System.Boolean)">
            <summary>
            设置对象是否被加锁。
            </summary>
            <param name="obj">要设置被加锁的内部对象。</param>
            <param name="locked">是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.SetLocked(System.Object,System.Boolean)">
            <summary>
            设置对象是否被加锁。
            </summary>
            <param name="target">要设置被加锁的对象。</param>
            <param name="locked">是否被加锁。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.SetPriority(`0,System.Int32)">
            <summary>
            设置对象的优先级。
            </summary>
            <param name="obj">要设置优先级的内部对象。</param>
            <param name="priority">优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.SetPriority(System.Object,System.Int32)">
            <summary>
            设置对象的优先级。
            </summary>
            <param name="target">要设置优先级的对象。</param>
            <param name="priority">优先级。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Release">
            <summary>
            释放对象池中的可释放对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Release(System.Int32)">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Release(GameFramework.ObjectPool.ReleaseObjectFilterCallback{`0})">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="releaseObjectFilterCallback">释放对象筛选函数。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.Release(System.Int32,GameFramework.ObjectPool.ReleaseObjectFilterCallback{`0})">
            <summary>
            释放对象池中的可释放对象。
            </summary>
            <param name="toReleaseCount">尝试释放对象数量。</param>
            <param name="releaseObjectFilterCallback">释放对象筛选函数。</param>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.ReleaseAllUnused">
            <summary>
            释放对象池中的所有未使用对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.ObjectPool`1.GetAllObjectInfos">
            <summary>
            获取所有对象信息。
            </summary>
            <returns>所有对象信息。</returns>
        </member>
        <member name="T:GameFramework.ObjectPool.ObjectPoolManager.Object`1">
            <summary>
            内部对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.#ctor(`0,System.Boolean)">
            <summary>
            初始化内部对象的新实例。
            </summary>
            <param name="obj">对象。</param>
            <param name="spawned">对象是否已被获取。</param>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Name">
            <summary>
            获取对象名称。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Locked">
            <summary>
            获取对象是否被加锁。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Priority">
            <summary>
            获取对象的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.CustomCanReleaseFlag">
            <summary>
            获取自定义释放检查标记。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.LastUseTime">
            <summary>
            获取对象上次使用时间。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.IsInUse">
            <summary>
            获取对象是否正在使用。
            </summary>
        </member>
        <member name="P:GameFramework.ObjectPool.ObjectPoolManager.Object`1.SpawnCount">
            <summary>
            获取对象的获取计数。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Peek">
            <summary>
            查看对象。
            </summary>
            <returns>对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Spawn">
            <summary>
            获取对象。
            </summary>
            <returns>对象。</returns>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Unspawn">
            <summary>
            回收对象。
            </summary>
        </member>
        <member name="M:GameFramework.ObjectPool.ObjectPoolManager.Object`1.Release(System.Boolean)">
            <summary>
            释放对象。
            </summary>
            <param name="isShutdown">是否是关闭对象池时触发。</param>
        </member>
        <member name="T:GameFramework.ObjectPool.ReleaseObjectFilterCallback`1">
            <summary>
            释放对象筛选函数。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="candidateObjects">要筛选的对象集合。</param>
            <param name="toReleaseCount">需要释放的对象数量。</param>
            <param name="expireTime">对象过期参考时间。</param>
            <returns>经筛选需要释放的对象集合。</returns>
        </member>
        <member name="T:GameFramework.Resource.InitResourcesCompleteCallback">
            <summary>
            使用单机模式并初始化资源完成的回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetDependencyAssetCallback">
            <summary>
            加载资源时加载依赖资源回调函数。
            </summary>
            <param name="assetName">要加载的资源名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetUpdateCallback">
            <summary>
            加载资源更新回调函数。
            </summary>
            <param name="assetName">要加载的资源名称。</param>
            <param name="progress">加载资源进度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetSuccessCallback">
            <summary>
            加载资源成功回调函数。
            </summary>
            <param name="assetName">要加载的资源名称。</param>
            <param name="asset">已加载的资源。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetFailureCallback">
            <summary>
            加载资源失败回调函数。
            </summary>
            <param name="assetName">要加载的资源名称。</param>
            <param name="status">加载资源状态。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.DecryptResourceCallback">
            <summary>
            解密资源回调函数。
            </summary>
            <param name="name">资源名称。</param>
            <param name="variant">变体名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="storageInReadOnly">资源是否在只读区。</param>
            <param name="bytes">待解密的资源二进制流。</param>
            <returns>解密后的资源二进制流。</returns>
        </member>
        <member name="T:GameFramework.Resource.CheckResourcesCompleteCallback">
            <summary>
            使用可更新模式并检查资源完成的回调函数。
            </summary>
            <param name="needUpdateResources">是否需要进行资源更新。</param>
            <param name="removedCount">已移除的资源数量。</param>
            <param name="updateCount">要更新的资源数量。</param>
            <param name="updateTotalLength">要更新的资源总大小。</param>
            <param name="updateTotalZipLength">要更新的压缩包总大小。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadBytesCallback">
            <summary>
            读取数据流回调函数。
            </summary>
            <param name="fileUri">文件路径。</param>
            <param name="bytes">数据流。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneDependencyAssetCallback">
            <summary>
            加载场景时加载依赖资源回调函数。
            </summary>
            <param name="sceneAssetName">要加载的场景资源名称。</param>
            <param name="dependencyAssetName">被加载的依赖资源名称。</param>
            <param name="loadedCount">当前已加载依赖资源数量。</param>
            <param name="totalCount">总共加载依赖资源数量。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneFailureCallback">
            <summary>
            加载场景失败回调函数。
            </summary>
            <param name="sceneAssetName">要加载的场景资源名称。</param>
            <param name="status">加载场景状态。</param>
            <param name="errorMessage">错误信息。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneSuccessCallback">
            <summary>
            加载场景成功回调函数。
            </summary>
            <param name="sceneAssetName">要加载的场景资源名称。</param>
            <param name="duration">加载持续时间。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneUpdateCallback">
            <summary>
            加载场景更新回调函数。
            </summary>
            <param name="sceneAssetName">要加载的场景资源名称。</param>
            <param name="progress">加载场景进度。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.UnloadSceneFailureCallback">
            <summary>
            卸载场景失败回调函数。
            </summary>
            <param name="sceneAssetName">要卸载的场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.UnloadSceneSuccessCallback">
            <summary>
            卸载场景成功回调函数。
            </summary>
            <param name="sceneAssetName">要卸载的场景资源名称。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.UpdateResourcesCompleteCallback">
            <summary>
            使用可更新模式并更新资源全部完成的回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.UpdateVersionListFailureCallback">
            <summary>
            版本资源列表更新失败回调函数。
            </summary>
            <param name="downloadUri">版本资源列表更新地址。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="T:GameFramework.Resource.UpdateVersionListSuccessCallback">
            <summary>
            版本资源列表更新成功回调函数。
            </summary>
            <param name="downloadPath">版本资源列表更新后存放路径。</param>
            <param name="downloadUri">版本资源列表更新地址。</param>
        </member>
        <member name="T:GameFramework.Resource.CheckVersionListResult">
            <summary>
            检查版本资源列表结果。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.CheckVersionListResult.Updated">
            <summary>
            已经是最新的。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.CheckVersionListResult.NeedUpdate">
            <summary>
            需要更新。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.Constant">
            <summary>
            资源相关常量。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.Constant.DefaultPriority">
            <summary>
            默认资源加载优先级。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ILoadResourceAgentHelper">
            <summary>
            加载资源代理辅助器接口。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperUpdate">
            <summary>
            加载资源代理辅助器异步加载资源更新事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperReadFileComplete">
            <summary>
            加载资源代理辅助器异步读取资源文件完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperReadBytesComplete">
            <summary>
            加载资源代理辅助器异步读取资源二进制流完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperParseBytesComplete">
            <summary>
            加载资源代理辅助器异步将资源二进制流转换为加载对象完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperLoadComplete">
            <summary>
            加载资源代理辅助器异步加载资源完成事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ILoadResourceAgentHelper.LoadResourceAgentHelperError">
            <summary>
            加载资源代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.ReadFile(System.String)">
            <summary>
            通过加载资源代理辅助器开始异步读取资源文件。
            </summary>
            <param name="fullPath">要加载资源的完整路径名。</param>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.ReadBytes(System.String,System.Int32)">
            <summary>
            通过加载资源代理辅助器开始异步读取资源二进制流。
            </summary>
            <param name="fullPath">要加载资源的完整路径名。</param>
            <param name="loadType">资源加载方式。</param>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.ParseBytes(System.Byte[])">
            <summary>
            通过加载资源代理辅助器开始异步将资源二进制流转换为加载对象。
            </summary>
            <param name="bytes">要加载资源的二进制流。</param>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.LoadAsset(System.Object,System.String,System.Type,System.Boolean)">
            <summary>
            通过加载资源代理辅助器开始异步加载资源。
            </summary>
            <param name="resource">资源。</param>
            <param name="assetName">要加载的资源名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="isScene">要加载的资源是否是场景。</param>
        </member>
        <member name="M:GameFramework.Resource.ILoadResourceAgentHelper.Reset">
            <summary>
            重置加载资源代理辅助器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.IResourceHelper">
            <summary>
            资源辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.IResourceHelper.LoadBytes(System.String,GameFramework.Resource.LoadBytesCallback)">
            <summary>
            直接从指定文件路径读取数据流。
            </summary>
            <param name="fileUri">文件路径。</param>
            <param name="loadBytesCallback">读取数据流回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceHelper.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks,System.Object)">
            <summary>
            卸载场景。
            </summary>
            <param name="sceneAssetName">场景资源名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceHelper.Release(System.Object)">
            <summary>
            释放资源。
            </summary>
            <param name="objectToRelease">要释放的资源。</param>
        </member>
        <member name="T:GameFramework.Resource.IResourceManager">
            <summary>
            资源管理器接口。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ReadOnlyPath">
            <summary>
            获取资源只读区路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ReadWritePath">
            <summary>
            获取资源读写区路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceMode">
            <summary>
            获取资源模式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.CurrentVariant">
            <summary>
            获取当前变体。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ApplicableGameVersion">
            <summary>
            获取当前资源适用的游戏版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.InternalResourceVersion">
            <summary>
            获取当前内部资源版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetCount">
            <summary>
            获取已准备完毕资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceCount">
            <summary>
            获取已准备完毕资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdatePrefixUri">
            <summary>
            获取或设置资源更新下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdateFileCacheLength">
            <summary>
            获取或设置更新文件缓存大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.GenerateReadWriteListLength">
            <summary>
            获取或设置每下载多少字节的资源，刷新一次资源列表。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdateRetryCount">
            <summary>
            获取或设置资源更新重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdateWaitingCount">
            <summary>
            获取等待更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.UpdatingCount">
            <summary>
            获取正在更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.LoadTotalAgentCount">
            <summary>
            获取加载资源代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.LoadFreeAgentCount">
            <summary>
            获取可用加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.LoadWorkingAgentCount">
            <summary>
            获取工作中加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.LoadWaitingTaskCount">
            <summary>
            获取等待加载资源任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.AssetPriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourceExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.IResourceManager.ResourcePriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceUpdateStart">
            <summary>
            资源更新开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceUpdateChanged">
            <summary>
            资源更新改变事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceUpdateSuccess">
            <summary>
            资源更新成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.IResourceManager.ResourceUpdateFailure">
            <summary>
            资源更新失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetReadOnlyPath(System.String)">
            <summary>
            设置资源只读区路径。
            </summary>
            <param name="readOnlyPath">资源只读区路径。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetReadWritePath(System.String)">
            <summary>
            设置资源读写区路径。
            </summary>
            <param name="readWritePath">资源读写区路径。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetResourceMode(GameFramework.Resource.ResourceMode)">
            <summary>
            设置资源模式。
            </summary>
            <param name="resourceMode">资源模式。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetCurrentVariant(System.String)">
            <summary>
            设置当前变体。
            </summary>
            <param name="currentVariant">当前变体。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetDownloadManager(GameFramework.Download.IDownloadManager)">
            <summary>
            TODO 设置下载管理器。
            </summary>
            <param name="downloadManager">下载管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetDecryptResourceCallback(GameFramework.Resource.DecryptResourceCallback)">
            <summary>
            设置解密资源回调函数。
            </summary>
            <param name="decryptResourceCallback">要设置的解密资源回调函数。</param>
            <remarks>如果不设置，将使用默认的解密资源回调函数。</remarks>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.SetResourceHelper(GameFramework.Resource.IResourceHelper)">
            <summary>
            设置资源辅助器。
            </summary>
            <param name="resourceHelper">资源辅助器。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.AddLoadResourceAgentHelper(GameFramework.Resource.ILoadResourceAgentHelper)">
            <summary>
            增加加载资源代理辅助器。
            </summary>
            <param name="loadResourceAgentHelper">要增加的加载资源代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.InitResources(GameFramework.Resource.InitResourcesCompleteCallback)">
            <summary>
            使用单机模式并初始化资源。
            </summary>
            <param name="initResourcesCompleteCallback">使用单机模式并初始化资源完成的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.CheckVersionList(System.Int32)">
            <summary>
            使用可更新模式并检查版本资源列表。
            </summary>
            <param name="latestInternalResourceVersion">最新的内部资源版本号。</param>
            <returns>检查版本资源列表结果。</returns>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UpdateVersionList(System.Int32,System.Int32,System.Int32,System.Int32,GameFramework.Resource.UpdateVersionListCallbacks)">
            <summary>
            使用可更新模式并更新版本资源列表。
            </summary>
            <param name="versionListLength">版本资源列表大小。</param>
            <param name="versionListHashCode">版本资源列表哈希值。</param>
            <param name="versionListZipLength">版本资源列表压缩后大小。</param>
            <param name="versionListZipHashCode">版本资源列表压缩后哈希值。</param>
            <param name="updateVersionListCallbacks">版本资源列表更新回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.CheckResources(GameFramework.Resource.CheckResourcesCompleteCallback)">
            <summary>
            使用可更新模式并检查资源。
            </summary>
            <param name="checkResourcesCompleteCallback">使用可更新模式并检查资源完成的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UpdateResources(GameFramework.Resource.UpdateResourcesCompleteCallback)">
            <summary>
            使用可更新模式并更新资源。
            </summary>
            <param name="updateResourcesCompleteCallback">使用可更新模式并更新资源全部完成的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.HasAsset(System.String)">
            <summary>
            检查资源是否存在。
            </summary>
            <param name="assetName">要检查资源的名称。</param>
            <returns>资源是否存在。</returns>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,System.Type,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,System.Int32,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,System.Type,System.Int32,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,System.Type,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,System.Int32,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadAsset(System.String,System.Type,System.Int32,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UnloadAsset(System.Object)">
            <summary>
            卸载资源。
            </summary>
            <param name="asset">要卸载的资源。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadScene(System.String,GameFramework.Resource.LoadSceneCallbacks)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadScene(System.String,System.Int32,GameFramework.Resource.LoadSceneCallbacks)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadScene(System.String,GameFramework.Resource.LoadSceneCallbacks,System.Object)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.LoadScene(System.String,System.Int32,GameFramework.Resource.LoadSceneCallbacks,System.Object)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.IResourceManager.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks,System.Object)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.LoadAssetCallbacks">
            <summary>
            加载资源回调函数集。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetFailureCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetFailureCallback">加载资源失败回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetUpdateCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetUpdateCallback">加载资源更新回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetDependencyAssetCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetDependencyAssetCallback">加载资源时加载依赖资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetFailureCallback,GameFramework.Resource.LoadAssetUpdateCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetFailureCallback">加载资源失败回调函数。</param>
            <param name="loadAssetUpdateCallback">加载资源更新回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetFailureCallback,GameFramework.Resource.LoadAssetDependencyAssetCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetFailureCallback">加载资源失败回调函数。</param>
            <param name="loadAssetDependencyAssetCallback">加载资源时加载依赖资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadAssetCallbacks.#ctor(GameFramework.Resource.LoadAssetSuccessCallback,GameFramework.Resource.LoadAssetFailureCallback,GameFramework.Resource.LoadAssetUpdateCallback,GameFramework.Resource.LoadAssetDependencyAssetCallback)">
            <summary>
            初始化加载资源回调函数集的新实例。
            </summary>
            <param name="loadAssetSuccessCallback">加载资源成功回调函数。</param>
            <param name="loadAssetFailureCallback">加载资源失败回调函数。</param>
            <param name="loadAssetUpdateCallback">加载资源更新回调函数。</param>
            <param name="loadAssetDependencyAssetCallback">加载资源时加载依赖资源回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadAssetCallbacks.LoadAssetSuccessCallback">
            <summary>
            获取加载资源成功回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadAssetCallbacks.LoadAssetFailureCallback">
            <summary>
            获取加载资源失败回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadAssetCallbacks.LoadAssetUpdateCallback">
            <summary>
            获取加载资源更新回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadAssetCallbacks.LoadAssetDependencyAssetCallback">
            <summary>
            获取加载资源时加载依赖资源回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs">
            <summary>
            加载资源代理辅助器错误事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs.#ctor(GameFramework.Resource.LoadResourceStatus,System.String)">
            <summary>
            初始化加载资源代理辅助器错误事件的新实例。
            </summary>
            <param name="status">加载资源状态。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs.Status">
            <summary>
            获取加载资源状态。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperErrorEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperLoadCompleteEventArgs">
            <summary>
            加载资源代理辅助器异步加载资源完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperLoadCompleteEventArgs.#ctor(System.Object)">
            <summary>
            初始化加载资源代理辅助器异步加载资源完成事件的新实例。
            </summary>
            <param name="asset">加载的资源。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperLoadCompleteEventArgs.Asset">
            <summary>
            获取加载的资源。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperParseBytesCompleteEventArgs">
            <summary>
            加载资源代理辅助器异步将资源二进制流转换为加载对象完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperParseBytesCompleteEventArgs.#ctor(System.Object)">
            <summary>
            初始化加载资源代理辅助器异步将资源二进制流转换为加载对象完成事件的新实例。
            </summary>
            <param name="resource">资源对象。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperParseBytesCompleteEventArgs.Resource">
            <summary>
            获取加载对象。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperReadBytesCompleteEventArgs">
            <summary>
            加载资源代理辅助器异步读取资源二进制流完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperReadBytesCompleteEventArgs.#ctor(System.Byte[],System.Int32)">
            <summary>
            初始化加载资源代理辅助器异步读取资源二进制流完成事件的新实例。
            </summary>
            <param name="bytes">资源的二进制流。</param>
            <param name="loadType">资源加载方式。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperReadBytesCompleteEventArgs.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperReadBytesCompleteEventArgs.GetBytes">
            <summary>
            获取资源的二进制流。
            </summary>
            <returns>资源的二进制流。</returns>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperReadFileCompleteEventArgs">
            <summary>
            加载资源代理辅助器异步将资源文件转换为加载对象完成事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperReadFileCompleteEventArgs.#ctor(System.Object)">
            <summary>
            初始化加载资源代理辅助器异步将资源文件转换为加载对象完成事件的新实例。
            </summary>
            <param name="resource">资源对象。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperReadFileCompleteEventArgs.Resource">
            <summary>
            获取加载对象。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs">
            <summary>
            加载资源代理辅助器更新事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs.#ctor(GameFramework.Resource.LoadResourceProgress,System.Single)">
            <summary>
            初始化加载资源代理辅助器更新事件的新实例。
            </summary>
            <param name="type">进度类型。</param>
            <param name="progress">进度。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs.Type">
            <summary>
            获取进度类型。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadResourceAgentHelperUpdateEventArgs.Progress">
            <summary>
            获取进度。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceProgress">
            <summary>
            加载资源进度类型。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceProgress.ReadResource">
            <summary>
            读取资源包。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceProgress.LoadResource">
            <summary>
            加载资源包。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceProgress.LoadAsset">
            <summary>
            加载资源。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceProgress.LoadScene">
            <summary>
            加载场景。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadResourceStatus">
            <summary>
            加载资源状态。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.Ok">
            <summary>
            加载资源完成。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.NotReady">
            <summary>
            资源尚未准备完毕。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.NotExist">
            <summary>
            资源不存在于磁盘上。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.DependencyError">
            <summary>
            依赖资源错误。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.TypeError">
            <summary>
            资源类型错误。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.LoadResourceStatus.AssetError">
            <summary>
            加载资源错误。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.LoadSceneCallbacks">
            <summary>
            加载场景回调函数集。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneFailureCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneFailureCallback">加载场景失败回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneUpdateCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneUpdateCallback">加载场景更新回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneDependencyAssetCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneDependencyAssetCallback">加载场景时加载依赖资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneFailureCallback,GameFramework.Resource.LoadSceneUpdateCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneFailureCallback">加载场景失败回调函数。</param>
            <param name="loadSceneUpdateCallback">加载场景更新回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneFailureCallback,GameFramework.Resource.LoadSceneDependencyAssetCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneFailureCallback">加载场景失败回调函数。</param>
            <param name="loadSceneDependencyAssetCallback">加载场景时加载依赖资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.LoadSceneCallbacks.#ctor(GameFramework.Resource.LoadSceneSuccessCallback,GameFramework.Resource.LoadSceneFailureCallback,GameFramework.Resource.LoadSceneUpdateCallback,GameFramework.Resource.LoadSceneDependencyAssetCallback)">
            <summary>
            初始化加载场景回调函数集的新实例。
            </summary>
            <param name="loadSceneSuccessCallback">加载场景成功回调函数。</param>
            <param name="loadSceneFailureCallback">加载场景失败回调函数。</param>
            <param name="loadSceneUpdateCallback">加载场景更新回调函数。</param>
            <param name="loadSceneDependencyAssetCallback">加载场景时加载依赖资源回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.LoadSceneCallbacks.LoadSceneSuccessCallback">
            <summary>
            获取加载场景成功回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadSceneCallbacks.LoadSceneFailureCallback">
            <summary>
            获取加载场景失败回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadSceneCallbacks.LoadSceneUpdateCallback">
            <summary>
            获取加载场景更新回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.LoadSceneCallbacks.LoadSceneDependencyAssetCallback">
            <summary>
            获取加载场景时加载依赖资源回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.AssetInfo">
            <summary>
            资源信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.AssetInfo.#ctor(System.String,GameFramework.Resource.ResourceManager.ResourceName,System.String[])">
            <summary>
            初始化资源信息的新实例。
            </summary>
            <param name="assetName">资源名称。</param>
            <param name="resourceName">所在资源名称。</param>
            <param name="dependencyAssetNames">依赖资源名称。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetInfo.AssetName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetInfo.ResourceName">
            <summary>
            获取所在资源名称。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.AssetInfo.GetDependencyAssetNames">
            <summary>
            获取依赖资源名称。
            </summary>
            <returns>依赖资源名称。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.#ctor">
            <summary>
            初始化资源管理器的新实例。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.Priority">
            <summary>
            获取游戏框架模块优先级。
            </summary>
            <remarks>优先级较高的模块会优先轮询，并且关闭操作会后进行。</remarks>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ReadOnlyPath">
            <summary>
            获取资源只读区路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ReadWritePath">
            <summary>
            获取资源读写区路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceMode">
            <summary>
            获取资源模式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.CurrentVariant">
            <summary>
            获取当前变体。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ApplicableGameVersion">
            <summary>
            获取当前资源适用的游戏版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.InternalResourceVersion">
            <summary>
            获取当前内部资源版本号。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetCount">
            <summary>
            获取已准备完毕资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceCount">
            <summary>
            获取已准备完毕资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdatePrefixUri">
            <summary>
            获取或设置资源更新下载地址前缀。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdateFileCacheLength">
            <summary>
            获取或设置更新文件缓存大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.GenerateReadWriteListLength">
            <summary>
            获取或设置每下载多少字节的资源，刷新一次资源列表。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdateRetryCount">
            <summary>
            获取或设置资源更新重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdateWaitingCount">
            <summary>
            获取等待更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.UpdatingCount">
            <summary>
            获取正在更新资源数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.LoadTotalAgentCount">
            <summary>
            获取加载资源代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.LoadFreeAgentCount">
            <summary>
            获取可用加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.LoadWorkingAgentCount">
            <summary>
            获取工作中加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.LoadWaitingTaskCount">
            <summary>
            获取等待加载资源任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.AssetPriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourcePriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceUpdateStart">
            <summary>
            资源更新开始事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceUpdateChanged">
            <summary>
            资源更新改变事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceUpdateSuccess">
            <summary>
            资源更新成功事件。
            </summary>
        </member>
        <member name="E:GameFramework.Resource.ResourceManager.ResourceUpdateFailure">
            <summary>
            资源更新失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.Update(System.Single,System.Single)">
            <summary>
            资源管理器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.Shutdown">
            <summary>
            关闭并清理资源管理器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetReadOnlyPath(System.String)">
            <summary>
            设置资源只读区路径。
            </summary>
            <param name="readOnlyPath">资源只读区路径。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetReadWritePath(System.String)">
            <summary>
            设置资源读写区路径。
            </summary>
            <param name="readWritePath">资源读写区路径。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetResourceMode(GameFramework.Resource.ResourceMode)">
            <summary>
            设置资源模式。
            </summary>
            <param name="resourceMode">资源模式。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetCurrentVariant(System.String)">
            <summary>
            设置当前变体。
            </summary>
            <param name="currentVariant">当前变体。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetDownloadManager(GameFramework.Download.IDownloadManager)">
            <summary>
            设置下载管理器。
            </summary>
            <param name="downloadManager">下载管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetDecryptResourceCallback(GameFramework.Resource.DecryptResourceCallback)">
            <summary>
            设置解密资源回调函数。
            </summary>
            <param name="decryptResourceCallback">要设置的解密资源回调函数。</param>
            <remarks>如果不设置，将使用默认的解密资源回调函数。</remarks>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.SetResourceHelper(GameFramework.Resource.IResourceHelper)">
            <summary>
            设置资源辅助器。
            </summary>
            <param name="resourceHelper">资源辅助器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.AddLoadResourceAgentHelper(GameFramework.Resource.ILoadResourceAgentHelper)">
            <summary>
            增加加载资源代理辅助器。
            </summary>
            <param name="loadResourceAgentHelper">要增加的加载资源代理辅助器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.InitResources(GameFramework.Resource.InitResourcesCompleteCallback)">
            <summary>
            使用单机模式并初始化资源。
            </summary>
            <param name="initResourcesCompleteCallback">使用单机模式并初始化资源完成的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.CheckVersionList(System.Int32)">
            <summary>
            使用可更新模式并检查版本资源列表。
            </summary>
            <param name="latestInternalResourceVersion">最新的内部资源版本号。</param>
            <returns>检查版本资源列表结果。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UpdateVersionList(System.Int32,System.Int32,System.Int32,System.Int32,GameFramework.Resource.UpdateVersionListCallbacks)">
            <summary>
            使用可更新模式并更新版本资源列表。
            </summary>
            <param name="versionListLength">版本资源列表大小。</param>
            <param name="versionListHashCode">版本资源列表哈希值。</param>
            <param name="versionListZipLength">版本资源列表压缩后大小。</param>
            <param name="versionListZipHashCode">版本资源列表压缩后哈希值。</param>
            <param name="updateVersionListCallbacks">版本资源列表更新回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.CheckResources(GameFramework.Resource.CheckResourcesCompleteCallback)">
            <summary>
            使用可更新模式并检查资源。
            </summary>
            <param name="checkResourcesCompleteCallback">使用可更新模式并检查资源完成的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UpdateResources(GameFramework.Resource.UpdateResourcesCompleteCallback)">
            <summary>
            使用可更新模式并更新资源。
            </summary>
            <param name="updateResourcesCompleteCallback">使用可更新模式并更新资源全部完成的回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.HasAsset(System.String)">
            <summary>
            检查资源是否存在。
            </summary>
            <param name="assetName">要检查资源的名称。</param>
            <returns>资源是否存在。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,System.Type,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,System.Int32,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,System.Type,System.Int32,GameFramework.Resource.LoadAssetCallbacks)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,System.Type,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,System.Int32,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadAsset(System.String,System.Type,System.Int32,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UnloadAsset(System.Object)">
            <summary>
            卸载资源。
            </summary>
            <param name="asset">要卸载的资源。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadScene(System.String,GameFramework.Resource.LoadSceneCallbacks)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadScene(System.String,System.Int32,GameFramework.Resource.LoadSceneCallbacks)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadScene(System.String,GameFramework.Resource.LoadSceneCallbacks,System.Object)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.LoadScene(System.String,System.Int32,GameFramework.Resource.LoadSceneCallbacks,System.Object)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks,System.Object)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.LoadType">
            <summary>
            资源加载方式类型。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromFile">
            <summary>
            从文件加载。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromMemory">
            <summary>
            从内存加载。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromMemoryAndQuickDecrypt">
            <summary>
            从内存快速解密加载。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.LoadType.LoadFromMemoryAndDecrypt">
            <summary>
            从内存解密加载。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker">
            <summary>
            资源检查器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo">
            <summary>
            资源检查信息。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus">
            <summary>
            资源检查状态。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.Unknown">
            <summary>
            状态未知。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.NeedUpdate">
            <summary>
            需要更新。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.StorageInReadOnly">
            <summary>
            存在最新且已存放于只读区中。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.StorageInReadWrite">
            <summary>
            存在最新且已存放于读写区中。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.Unavailable">
            <summary>
            不适用于当前变体。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.CheckStatus.Disuse">
            <summary>
            已废弃。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.#ctor(GameFramework.Resource.ResourceManager.ResourceName)">
            <summary>
            初始化资源检查信息的新实例。
            </summary>
            <param name="resourceName">资源名称。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.ResourceName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.ZipLength">
            <summary>
            获取压缩包大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.ZipHashCode">
            <summary>
            获取压缩包哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.Status">
            <summary>
            获取资源检查状态。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.NeedRemove">
            <summary>
            获取资源是否可以从读写区移除。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.SetVersionInfo(GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置资源在版本中的信息。
            </summary>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="zipLength">压缩包大小。</param>
            <param name="zipHashCode">压缩包哈希值。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.SetReadOnlyInfo(GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32)">
            <summary>
            设置资源在只读区中的信息。
            </summary>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.SetReadWriteInfo(GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32)">
            <summary>
            设置资源在读写区中的信息。
            </summary>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.RefreshStatus(System.String)">
            <summary>
            刷新资源信息状态。
            </summary>
            <param name="currentVariant">当前变体。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.LocalVersionInfo">
            <summary>
            本地资源状态信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.LocalVersionInfo.#ctor(GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32)">
            <summary>
            本地资源状态信息。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.RemoteVersionInfo">
            <summary>
            远程资源状态信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.CheckInfo.RemoteVersionInfo.#ctor(GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            远程资源状态信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化资源检查器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.Shutdown">
            <summary>
            关闭并清理资源检查器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.TryRecoverReadWriteList">
            <summary>
            尝试恢复读写区资源列表。
            </summary>
            <returns>是否恢复成功。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.ParseVersionList(System.String,System.Byte[],System.String)">
            <summary>
            解析版本资源列表。
            </summary>
            <param name="fileUri">版本资源列表文件路径。</param>
            <param name="bytes">要解析的数据。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.ParseReadOnlyList(System.String,System.Byte[],System.String)">
            <summary>
            解析只读区资源列表。
            </summary>
            <param name="fileUri">只读区资源列表文件路径。</param>
            <param name="bytes">要解析的数据。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceChecker.ParseReadWriteList(System.String,System.Byte[],System.String)">
            <summary>
            解析读写区资源列表。
            </summary>
            <param name="fileUri">读写区资源列表文件路径。</param>
            <param name="bytes">要解析的数据。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceInfo">
            <summary>
            资源信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceInfo.#ctor(GameFramework.Resource.ResourceManager.ResourceName,GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32,System.Boolean)">
            <summary>
            初始化资源信息的新实例。
            </summary>
            <param name="resourceName">资源名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="storageInReadOnly">资源是否在只读区。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.ResourceName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceInfo.StorageInReadOnly">
            <summary>
            获取资源是否在只读区。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceIniter">
            <summary>
            资源初始化器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceIniter.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化资源初始化器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceIniter.Shutdown">
            <summary>
            关闭并清理资源初始化器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceIniter.InitResources(System.String)">
            <summary>
            初始化资源。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceIniter.ParsePackageList(System.String,System.Byte[],System.String)">
            <summary>
            解析资源包资源列表。
            </summary>
            <param name="fileUri">版本资源列表文件路径。</param>
            <param name="bytes">要解析的数据。</param>
            <param name="errorMessage">错误信息。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceLoader">
            <summary>
            加载资源器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceLoader.AssetObject">
            <summary>
            资源对象。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化加载资源器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.TotalAgentCount">
            <summary>
            获取加载资源代理总数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.FreeAgentCount">
            <summary>
            获取可用加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.WorkingAgentCount">
            <summary>
            获取工作中加载资源代理数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.WaitingTaskCount">
            <summary>
            获取等待加载资源任务数量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.AssetAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.AssetCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.AssetExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.AssetPriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.ResourceAutoReleaseInterval">
            <summary>
            获取或设置资源对象池自动释放可释放对象的间隔秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.ResourceCapacity">
            <summary>
            获取或设置资源对象池的容量。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.ResourceExpireTime">
            <summary>
            获取或设置资源对象池对象过期秒数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.ResourcePriority">
            <summary>
            获取或设置资源对象池的优先级。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.Update(System.Single,System.Single)">
            <summary>
            加载资源器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.Shutdown">
            <summary>
            关闭并清理加载资源器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.SetObjectPoolManager(GameFramework.ObjectPool.IObjectPoolManager)">
            <summary>
            设置对象池管理器。
            </summary>
            <param name="objectPoolManager">对象池管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.AddLoadResourceAgentHelper(GameFramework.Resource.ILoadResourceAgentHelper,GameFramework.Resource.IResourceHelper,System.String,System.String,GameFramework.Resource.DecryptResourceCallback)">
            <summary>
            增加加载资源代理辅助器。
            </summary>
            <param name="loadResourceAgentHelper">要增加的加载资源代理辅助器。</param>
            <param name="resourceHelper">资源辅助器。</param>
            <param name="readOnlyPath">资源只读区路径。</param>
            <param name="readWritePath">资源读写区路径。</param>
            <param name="decryptResourceCallback">要设置的解密资源回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.HasAsset(System.String)">
            <summary>
            检查资源是否存在。
            </summary>
            <param name="assetName">要检查资源的名称。</param>
            <returns>资源是否存在。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadAsset(System.String,System.Type,System.Int32,GameFramework.Resource.LoadAssetCallbacks,System.Object)">
            <summary>
            异步加载资源。
            </summary>
            <param name="assetName">要加载资源的名称。</param>
            <param name="assetType">要加载资源的类型。</param>
            <param name="priority">加载资源的优先级。</param>
            <param name="loadAssetCallbacks">加载资源回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.UnloadAsset(System.Object)">
            <summary>
            卸载资源。
            </summary>
            <param name="asset">要卸载的资源。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadScene(System.String,System.Int32,GameFramework.Resource.LoadSceneCallbacks,System.Object)">
            <summary>
            异步加载场景。
            </summary>
            <param name="sceneAssetName">要加载场景资源的名称。</param>
            <param name="priority">加载场景资源的优先级。</param>
            <param name="loadSceneCallbacks">加载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.UnloadScene(System.String,GameFramework.Resource.UnloadSceneCallbacks,System.Object)">
            <summary>
            异步卸载场景。
            </summary>
            <param name="sceneAssetName">要卸载场景资源的名称。</param>
            <param name="unloadSceneCallbacks">卸载场景回调函数集。</param>
            <param name="userData">用户自定义数据。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent">
            <summary>
            加载资源代理。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.#ctor(GameFramework.Resource.ILoadResourceAgentHelper,GameFramework.Resource.IResourceHelper,GameFramework.Resource.ResourceManager.ResourceLoader,System.String,System.String,GameFramework.Resource.DecryptResourceCallback)">
            <summary>
            初始化加载资源代理的新实例。
            </summary>
            <param name="loadResourceAgentHelper">加载资源代理辅助器。</param>
            <param name="resourceHelper">资源辅助器。</param>
            <param name="resourceLoader">加载资源器。</param>
            <param name="readOnlyPath">资源只读区路径。</param>
            <param name="readWritePath">资源读写区路径。</param>
            <param name="decryptResourceCallback">解密资源回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Task">
            <summary>
            获取加载资源任务。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Initialize">
            <summary>
            初始化加载资源代理。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Update(System.Single,System.Single)">
            <summary>
            加载资源代理轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Shutdown">
            <summary>
            关闭并清理加载资源代理。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Start(GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceTaskBase)">
            <summary>
            开始处理加载资源任务。
            </summary>
            <param name="task">要处理的加载资源任务。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceLoader.LoadResourceAgent.Reset">
            <summary>
            重置加载资源代理。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceLoader.ResourceObject">
            <summary>
            资源对象。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceName">
            <summary>
            资源名称。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceName.#ctor(System.String,System.String)">
            <summary>
            初始化资源名称的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="variant">变体名称。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceName.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceName.Variant">
            <summary>
            获取变体名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceName.IsVariant">
            <summary>
            获取是否变体。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceNameComparer">
            <summary>
            资源名称比较器。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceUpdater">
            <summary>
            资源更新器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化资源更新器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.GenerateReadWriteListLength">
            <summary>
            获取或设置每下载多少字节的资源，刷新一次资源列表。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.RetryCount">
            <summary>
            获取或设置资源更新重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateWaitingCount">
            <summary>
            获取等待更新队列大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdatingCount">
            <summary>
            获取正在更新队列大小。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.Update(System.Single,System.Single)">
            <summary>
            资源更新器轮询。
            </summary>
            <param name="elapseSeconds">逻辑流逝时间，以秒为单位。</param>
            <param name="realElapseSeconds">真实流逝时间，以秒为单位。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.Shutdown">
            <summary>
            关闭并清理资源更新器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.SetDownloadManager(GameFramework.Download.IDownloadManager)">
            <summary>
            设置下载管理器。
            </summary>
            <param name="downloadManager">下载管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.AddResourceUpdate(GameFramework.Resource.ResourceManager.ResourceName,GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            增加资源更新。
            </summary>
            <param name="resourceName">资源名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="zipLength">压缩包大小。</param>
            <param name="zipHashCode">压缩包哈希值。</param>
            <param name="downloadPath">下载后存放路径。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="retryCount">已重试次数。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.CheckResourceComplete(System.Boolean)">
            <summary>
            检查资源完成。
            </summary>
            <param name="needGenerateReadWriteList">是否需要生成读写区资源列表。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateResources">
            <summary>
            更新资源。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo">
            <summary>
            更新信息。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.#ctor(GameFramework.Resource.ResourceManager.ResourceName,GameFramework.Resource.ResourceManager.LoadType,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            初始化更新信息的新实例。
            </summary>
            <param name="resourceName">资源名称。</param>
            <param name="loadType">资源加载方式。</param>
            <param name="length">资源大小。</param>
            <param name="hashCode">资源哈希值。</param>
            <param name="zipLength">压缩包大小。</param>
            <param name="zipHashCode">压缩包哈希值。</param>
            <param name="downloadPath">资源更新下载后存放路径。</param>
            <param name="downloadUri">资源更新下载地址。</param>
            <param name="retryCount">已重试次数。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.ResourceName">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.LoadType">
            <summary>
            获取资源加载方式。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.HashCode">
            <summary>
            获取资源哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.ZipLength">
            <summary>
            获取压缩包大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.ZipHashCode">
            <summary>
            获取压缩包哈希值。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.DownloadPath">
            <summary>
            获取下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceManager.ResourceUpdater.UpdateInfo.RetryCount">
            <summary>
            获取已重试次数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceManager.VersionListProcessor">
            <summary>
            版本资源列表处理器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.#ctor(GameFramework.Resource.ResourceManager)">
            <summary>
            初始化版本资源列表处理器的新实例。
            </summary>
            <param name="resourceManager">资源管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.Shutdown">
            <summary>
            关闭并清理版本资源列表处理器。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.SetDownloadManager(GameFramework.Download.IDownloadManager)">
            <summary>
            设置下载管理器。
            </summary>
            <param name="downloadManager">下载管理器。</param>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.CheckVersionList(System.Int32)">
            <summary>
            检查版本资源列表。
            </summary>
            <param name="latestInternalResourceVersion">最新的内部资源版本号。</param>
            <returns>检查版本资源列表结果。</returns>
        </member>
        <member name="M:GameFramework.Resource.ResourceManager.VersionListProcessor.UpdateVersionList(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            更新版本资源列表。
            </summary>
            <param name="versionListLength">版本资源列表大小。</param>
            <param name="versionListHashCode">版本资源列表哈希值。</param>
            <param name="versionListZipLength">版本资源列表压缩后大小。</param>
            <param name="versionListZipHashCode">版本资源列表压缩后哈希值。</param>
        </member>
        <member name="T:GameFramework.Resource.ResourceMode">
            <summary>
            资源模式。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceMode.Unspecified">
            <summary>
            未指定。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceMode.Package">
            <summary>
            单机模式。
            </summary>
        </member>
        <member name="F:GameFramework.Resource.ResourceMode.Updatable">
            <summary>
            可更新模式。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceUpdateChangedEventArgs">
            <summary>
            资源更新改变事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateChangedEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            初始化资源更新改变事件的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="downloadPath">资源下载后存放路径。</param>
            <param name="downloadUri">资源下载地址。</param>
            <param name="currentLength">当前下载大小。</param>
            <param name="zipLength">压缩包大小。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.DownloadPath">
            <summary>
            获取资源下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.CurrentLength">
            <summary>
            获取当前下载大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateChangedEventArgs.ZipLength">
            <summary>
            获取压缩包大小。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceUpdateFailureEventArgs">
            <summary>
            资源更新失败事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateFailureEventArgs.#ctor(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            初始化资源更新失败事件的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="downloadUri">下载地址。</param>
            <param name="retryCount">已重试次数。</param>
            <param name="totalRetryCount">设定的重试次数。</param>
            <param name="errorMessage">错误信息。</param>
            <remarks>当已重试次数达到设定的重试次数时，将不再重试。</remarks>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.RetryCount">
            <summary>
            获取已重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.TotalRetryCount">
            <summary>
            获取设定的重试次数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateFailureEventArgs.ErrorMessage">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceUpdateStartEventArgs">
            <summary>
            资源更新开始事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateStartEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化资源更新开始事件的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="downloadPath">资源下载后存放路径。</param>
            <param name="downloadUri">资源下载地址。</param>
            <param name="currentLength">当前下载大小。</param>
            <param name="zipLength">压缩包大小。</param>
            <param name="retryCount">已重试下载次数。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.DownloadPath">
            <summary>
            获取资源下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.CurrentLength">
            <summary>
            获取当前下载大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.ZipLength">
            <summary>
            获取压缩包大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateStartEventArgs.RetryCount">
            <summary>
            获取已重试下载次数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.ResourceUpdateSuccessEventArgs">
            <summary>
            资源更新成功事件。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.ResourceUpdateSuccessEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            初始化资源更新成功事件的新实例。
            </summary>
            <param name="name">资源名称。</param>
            <param name="downloadPath">资源下载后存放路径。</param>
            <param name="downloadUri">资源下载地址。</param>
            <param name="length">资源大小。</param>
            <param name="zipLength">压缩包大小。</param>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.Name">
            <summary>
            获取资源名称。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.DownloadPath">
            <summary>
            获取资源下载后存放路径。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.DownloadUri">
            <summary>
            获取下载地址。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.Length">
            <summary>
            获取资源大小。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.ResourceUpdateSuccessEventArgs.ZipLength">
            <summary>
            获取压缩包大小。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.UnloadSceneCallbacks">
            <summary>
            卸载场景回调函数集。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UnloadSceneCallbacks.#ctor(GameFramework.Resource.UnloadSceneSuccessCallback)">
            <summary>
            初始化卸载场景回调函数集的新实例。
            </summary>
            <param name="unloadSceneSuccessCallback">卸载场景成功回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.UnloadSceneCallbacks.#ctor(GameFramework.Resource.UnloadSceneSuccessCallback,GameFramework.Resource.UnloadSceneFailureCallback)">
            <summary>
            初始化卸载场景回调函数集的新实例。
            </summary>
            <param name="unloadSceneSuccessCallback">卸载场景成功回调函数。</param>
            <param name="unloadSceneFailureCallback">卸载场景失败回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.UnloadSceneCallbacks.UnloadSceneSuccessCallback">
            <summary>
            获取卸载场景成功回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UnloadSceneCallbacks.UnloadSceneFailureCallback">
            <summary>
            获取卸载场景失败回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Resource.UpdateVersionListCallbacks">
            <summary>
            版本资源列表更新回调函数集。
            </summary>
        </member>
        <member name="M:GameFramework.Resource.UpdateVersionListCallbacks.#ctor(GameFramework.Resource.UpdateVersionListSuccessCallback)">
            <summary>
            初始化版本资源列表更新回调函数集的新实例。
            </summary>
            <param name="updateVersionListSuccessCallback">版本资源列表更新成功回调函数。</param>
        </member>
        <member name="M:GameFramework.Resource.UpdateVersionListCallbacks.#ctor(GameFramework.Resource.UpdateVersionListSuccessCallback,GameFramework.Resource.UpdateVersionListFailureCallback)">
            <summary>
            初始化版本资源列表更新回调函数集的新实例。
            </summary>
            <param name="updateVersionListSuccessCallback">版本资源列表更新成功回调函数。</param>
            <param name="updateVersionListFailureCallback">版本资源列表更新失败回调函数。</param>
        </member>
        <member name="P:GameFramework.Resource.UpdateVersionListCallbacks.UpdateVersionListSuccessCallback">
            <summary>
            获取版本资源列表更新成功回调函数。
            </summary>
        </member>
        <member name="P:GameFramework.Resource.UpdateVersionListCallbacks.UpdateVersionListFailureCallback">
            <summary>
            获取版本资源列表更新失败回调函数。
            </summary>
        </member>
        <member name="T:GameFramework.Utility">
            <summary>
            实用函数集。
            </summary>
        </member>
        <member name="T:GameFramework.Utility.Assembly">
            <summary>
            程序集相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Assembly.GetAssemblies">
            <summary>
            获取已加载的程序集。
            </summary>
            <returns>已加载的程序集。</returns>
        </member>
        <member name="M:GameFramework.Utility.Assembly.GetTypes">
            <summary>
            获取已加载的程序集中的所有类型。
            </summary>
            <returns>已加载的程序集中的所有类型。</returns>
        </member>
        <member name="M:GameFramework.Utility.Assembly.GetTypes(System.Collections.Generic.List{System.Type})">
            <summary>
            获取已加载的程序集中的所有类型。
            </summary>
            <param name="results">已加载的程序集中的所有类型。</param>
        </member>
        <member name="M:GameFramework.Utility.Assembly.GetType(System.String)">
            <summary>
            获取已加载的程序集中的指定类型。
            </summary>
            <param name="typeName">要获取的类型名。</param>
            <returns>已加载的程序集中的指定类型。</returns>
        </member>
        <member name="T:GameFramework.Utility.Converter">
            <summary>
            类型转换相关的实用函数。
            </summary>
        </member>
        <member name="P:GameFramework.Utility.Converter.IsLittleEndian">
            <summary>
            获取数据在此计算机结构中存储时的字节顺序。
            </summary>
        </member>
        <member name="P:GameFramework.Utility.Converter.ScreenDpi">
            <summary>
            获取或设置屏幕每英寸点数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetCentimetersFromPixels(System.Single)">
            <summary>
            将像素转换为厘米。
            </summary>
            <param name="pixels">像素。</param>
            <returns>厘米。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetPixelsFromCentimeters(System.Single)">
            <summary>
            将厘米转换为像素。
            </summary>
            <param name="centimeters">厘米。</param>
            <returns>像素。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInchesFromPixels(System.Single)">
            <summary>
            将像素转换为英寸。
            </summary>
            <param name="pixels">像素。</param>
            <returns>英寸。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetPixelsFromInches(System.Single)">
            <summary>
            将英寸转换为像素。
            </summary>
            <param name="inches">英寸。</param>
            <returns>像素。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Boolean)">
            <summary>
            以字节数组的形式获取指定的布尔值。
            </summary>
            <param name="value">要转换的布尔值。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Boolean,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的布尔值。
            </summary>
            <param name="value">要转换的布尔值。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的布尔值。
            </summary>
            <param name="value">要转换的布尔值。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBoolean(System.Byte[])">
            <summary>
            返回由字节数组中首字节转换来的布尔值。
            </summary>
            <param name="value">字节数组。</param>
            <returns>如果 value 中的首字节非零，则为 true，否则为 false。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBoolean(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的一个字节转换来的布尔值。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>如果 value 中指定位置的字节非零，则为 true，否则为 false。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Char)">
            <summary>
            以字节数组的形式获取指定的 Unicode 字符值。
            </summary>
            <param name="value">要转换的字符。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Char,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 Unicode 字符值。
            </summary>
            <param name="value">要转换的字符。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 Unicode 字符值。
            </summary>
            <param name="value">要转换的字符。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetChar(System.Byte[])">
            <summary>
            返回由字节数组中前两个字节转换来的 Unicode 字符。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由两个字节构成的字符。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetChar(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的两个字节转换来的 Unicode 字符。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由两个字节构成的字符。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int16)">
            <summary>
            以字节数组的形式获取指定的 16 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int16,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 16 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 16 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInt16(System.Byte[])">
            <summary>
            返回由字节数组中前两个字节转换来的 16 位有符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由两个字节构成的 16 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInt16(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的两个字节转换来的 16 位有符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由两个字节构成的 16 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt16)">
            <summary>
            以字节数组的形式获取指定的 16 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt16,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 16 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 16 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetUInt16(System.Byte[])">
            <summary>
            返回由字节数组中前两个字节转换来的 16 位无符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由两个字节构成的 16 位无符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetUInt16(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的两个字节转换来的 16 位无符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由两个字节构成的 16 位无符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int32)">
            <summary>
            以字节数组的形式获取指定的 32 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int32,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 32 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 32 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInt32(System.Byte[])">
            <summary>
            返回由字节数组中前四个字节转换来的 32 位有符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由四个字节构成的 32 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInt32(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的四个字节转换来的 32 位有符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由四个字节构成的 32 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt32)">
            <summary>
            以字节数组的形式获取指定的 32 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt32,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 32 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 32 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetUInt32(System.Byte[])">
            <summary>
            返回由字节数组中前四个字节转换来的 32 位无符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由四个字节构成的 32 位无符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetUInt32(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的四个字节转换来的 32 位无符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由四个字节构成的 32 位无符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int64)">
            <summary>
            以字节数组的形式获取指定的 64 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int64,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 64 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 64 位有符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInt64(System.Byte[])">
            <summary>
            返回由字节数组中前八个字节转换来的 64 位有符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由八个字节构成的 64 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetInt64(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的八个字节转换来的 64 位有符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由八个字节构成的 64 位有符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt64)">
            <summary>
            以字节数组的形式获取指定的 64 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt64,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的 64 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的 64 位无符号整数值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetUInt64(System.Byte[])">
            <summary>
            返回由字节数组中前八个字节转换来的 64 位无符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由八个字节构成的 64 位无符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetUInt64(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的八个字节转换来的 64 位无符号整数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由八个字节构成的 64 位无符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Single)">
            <summary>
            以字节数组的形式获取指定的单精度浮点值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Single,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的单精度浮点值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的单精度浮点值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetSingle(System.Byte[])">
            <summary>
            返回由字节数组中前四个字节转换来的单精度浮点数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由四个字节构成的单精度浮点数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetSingle(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的四个字节转换来的单精度浮点数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由四个字节构成的单精度浮点数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Double)">
            <summary>
            以字节数组的形式获取指定的双精度浮点值。
            </summary>
            <param name="value">要转换的数字。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Double,System.Byte[])">
            <summary>
            以字节数组的形式获取指定的双精度浮点值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            以字节数组的形式获取指定的双精度浮点值。
            </summary>
            <param name="value">要转换的数字。</param>
            <param name="buffer">用于存放结果的字节数组。</param>
            <param name="startIndex">buffer 内的起始位置。</param>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetDouble(System.Byte[])">
            <summary>
            返回由字节数组中前八个字节转换来的双精度浮点数。
            </summary>
            <param name="value">字节数组。</param>
            <returns>由八个字节构成的双精度浮点数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetDouble(System.Byte[],System.Int32)">
            <summary>
            返回由字节数组中指定位置的八个字节转换来的双精度浮点数。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <returns>由八个字节构成的双精度浮点数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetBytes(System.String)">
            <summary>
            以字节数组的形式获取指定的 UTF-8 字符串。
            </summary>
            <param name="value">要转换的字符串。</param>
            <returns>用于存放结果的字节数组。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetString(System.Byte[])">
            <summary>
            返回由字节数组转换来的 UTF-8 字符串。
            </summary>
            <param name="value">字节数组。</param>
            <returns>UTF-8 字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Converter.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            返回由字节数组转换来的 UTF-8 字符串。
            </summary>
            <param name="value">字节数组。</param>
            <param name="startIndex">value 内的起始位置。</param>
            <param name="length">长度。</param>
            <returns>UTF-8 字符串。</returns>
        </member>
        <member name="T:GameFramework.Utility.Encryption">
            <summary>
            加密解密相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetQuickXorBytes(System.Byte[],System.Byte[])">
            <summary>
            将 bytes 使用 code 做异或运算的快速版本。
            </summary>
            <param name="bytes">原始二进制流。</param>
            <param name="code">异或二进制流。</param>
            <returns>异或后的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetQuickSelfXorBytes(System.Byte[],System.Byte[])">
            <summary>
            将 bytes 使用 code 做异或运算的快速版本。此方法将复用并改写传入的 bytes 作为返回值，而不额外分配内存空间。
            </summary>
            <param name="bytes">原始及异或后的二进制流。</param>
            <param name="code">异或二进制流。</param>
            <returns>异或后的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetXorBytes(System.Byte[],System.Byte[])">
            <summary>
            将 bytes 使用 code 做异或运算。
            </summary>
            <param name="bytes">原始二进制流。</param>
            <param name="code">异或二进制流。</param>
            <returns>异或后的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetSelfXorBytes(System.Byte[],System.Byte[])">
            <summary>
            将 bytes 使用 code 做异或运算。此方法将复用并改写传入的 bytes 作为返回值，而不额外分配内存空间。
            </summary>
            <param name="bytes">原始及异或后的二进制流。</param>
            <param name="code">异或二进制流。</param>
            <returns>异或后的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetXorBytes(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            将 bytes 使用 code 做异或运算。
            </summary>
            <param name="bytes">原始二进制流。</param>
            <param name="code">异或二进制流。</param>
            <param name="length">异或计算长度，若小于 0，则计算整个二进制流。</param>
            <returns>异或后的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Encryption.GetSelfXorBytes(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            将 bytes 使用 code 做异或运算。此方法将复用并改写传入的 bytes 作为返回值，而不额外分配内存空间。
            </summary>
            <param name="bytes">原始及异或后的二进制流。</param>
            <param name="code">异或二进制流。</param>
            <param name="length">异或计算长度，若小于 0，则计算整个二进制流。</param>
            <returns>异或后的二进制流。</returns>
        </member>
        <member name="T:GameFramework.Utility.Json">
            <summary>
            JSON 相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Json.SetJsonHelper(GameFramework.Utility.Json.IJsonHelper)">
            <summary>
            设置 JSON 辅助器。
            </summary>
            <param name="jsonHelper">要设置的 JSON 辅助器。</param>
        </member>
        <member name="M:GameFramework.Utility.Json.ToJson(System.Object)">
            <summary>
            将对象序列化为 JSON 字符串。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化后的 JSON 字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.ToJsonData(System.Object)">
            <summary>
            将对象序列化为 JSON 流。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化后的 JSON 流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.ToObject``1(System.String)">
            <summary>
            将 JSON 字符串反序列化为对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.ToObject(System.Type,System.String)">
            <summary>
            将 JSON 字符串反序列化为对象。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.ToObject``1(System.Byte[])">
            <summary>
            将 JSON 流反序列化为对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="jsonData">要反序列化的 JSON 流。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.ToObject(System.Type,System.Byte[])">
            <summary>
            将 JSON 字符串反序列化为对象。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="jsonData">要反序列化的 JSON 流。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:GameFramework.Utility.Json.IJsonHelper">
            <summary>
            JSON 辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Json.IJsonHelper.ToJson(System.Object)">
            <summary>
            将对象序列化为 JSON 字符串。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns>序列化后的 JSON 字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.IJsonHelper.ToObject``1(System.String)">
            <summary>
            将 JSON 字符串反序列化为对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:GameFramework.Utility.Json.IJsonHelper.ToObject(System.Type,System.String)">
            <summary>
            将 JSON 字符串反序列化为对象。
            </summary>
            <param name="objectType">对象类型。</param>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:GameFramework.Utility.Nullable">
            <summary>
            可空类型相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Nullable.IsNullable``1(``0)">
            <summary>
            获取对象是否是可空类型。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="t">对象。</param>
            <returns>对象是否是可空类型。</returns>
        </member>
        <member name="M:GameFramework.Utility.Nullable.IsNullable``1(System.Nullable{``0})">
            <summary>
            获取对象是否是可空类型。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="t">对象。</param>
            <returns>对象是否是可空类型。</returns>
        </member>
        <member name="T:GameFramework.Utility.Path">
            <summary>
            路径相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Path.GetRegularPath(System.String)">
            <summary>
            获取规范的路径。
            </summary>
            <param name="path">要规范的路径。</param>
            <returns>规范的路径。</returns>
        </member>
        <member name="M:GameFramework.Utility.Path.GetCombinePath(System.String[])">
            <summary>
            获取连接后的路径。
            </summary>
            <param name="path">路径片段。</param>
            <returns>连接后的路径。</returns>
        </member>
        <member name="M:GameFramework.Utility.Path.GetRemotePath(System.String[])">
            <summary>
            获取远程格式的路径（带有file:// 或 http:// 前缀）。
            </summary>
            <param name="path">原始路径。</param>
            <returns>远程格式路径。</returns>
        </member>
        <member name="M:GameFramework.Utility.Path.GetResourceNameWithSuffix(System.String)">
            <summary>
            获取带有后缀的资源名。
            </summary>
            <param name="resourceName">原始资源名。</param>
            <returns>带有后缀的资源名。</returns>
        </member>
        <member name="M:GameFramework.Utility.Path.GetResourceNameWithCrc32AndSuffix(System.String,System.Int32)">
            <summary>
            获取带有 CRC32 和后缀的资源名。
            </summary>
            <param name="resourceName">原始资源名。</param>
            <param name="hashCode">CRC32 哈希值。</param>
            <returns>带有 CRC32 和后缀的资源名。</returns>
        </member>
        <member name="M:GameFramework.Utility.Path.RemoveEmptyDirectory(System.String)">
            <summary>
            移除空文件夹。
            </summary>
            <param name="directoryName">要处理的文件夹名称。</param>
            <returns>是否移除空文件夹成功。</returns>
        </member>
        <member name="T:GameFramework.Utility.Profiler">
            <summary>
            性能分析相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Profiler.SetProfilerHelper(GameFramework.Utility.Profiler.IProfilerHelper)">
            <summary>
            设置性能分析辅助器。
            </summary>
            <param name="profilerHelper">要设置的性能分析辅助器。</param>
        </member>
        <member name="M:GameFramework.Utility.Profiler.BeginSample(System.String)">
            <summary>
            开始采样。
            </summary>
            <param name="name">采样名称。</param>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="M:GameFramework.Utility.Profiler.EndSample">
            <summary>
            结束采样。
            </summary>
            <remarks>仅在带有 DEBUG 预编译选项时生效。</remarks>
        </member>
        <member name="T:GameFramework.Utility.Profiler.IProfilerHelper">
            <summary>
            性能分析辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Profiler.IProfilerHelper.BeginSample(System.String)">
            <summary>
            开始采样。
            </summary>
            <param name="name">采样名称。</param>
        </member>
        <member name="M:GameFramework.Utility.Profiler.IProfilerHelper.EndSample">
            <summary>
            结束采样。
            </summary>
        </member>
        <member name="T:GameFramework.Utility.Random">
            <summary>
            随机相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Random.SetSeed(System.Int32)">
            <summary>
            设置随机数种子。
            </summary>
            <param name="seed">随机数种子。</param>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandom">
            <summary>
            返回非负随机数。
            </summary>
            <returns>大于等于零且小于 System.Int32.MaxValue 的 32 位带符号整数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandom(System.Int32)">
            <summary>
            返回一个小于所指定最大值的非负随机数。
            </summary>
            <param name="maxValue">要生成的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于零。</param>
            <returns>大于等于零且小于 maxValue 的 32 位带符号整数，即：返回值的范围通常包括零但不包括 maxValue。不过，如果 maxValue 等于零，则返回 maxValue。</returns>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandom(System.Int32,System.Int32)">
            <summary>
            返回一个指定范围内的随机数。
            </summary>
            <param name="minValue">返回的随机数的下界（随机数可取该下界值）。</param>
            <param name="maxValue">返回的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于 minValue。</param>
            <returns>一个大于等于 minValue 且小于 maxValue 的 32 位带符号整数，即：返回的值范围包括 minValue 但不包括 maxValue。如果 minValue 等于 maxValue，则返回 minValue。</returns>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandomDouble">
            <summary>
            返回一个介于 0.0 和 1.0 之间的随机数。
            </summary>
            <returns>大于等于 0.0 并且小于 1.0 的双精度浮点数。</returns>
        </member>
        <member name="M:GameFramework.Utility.Random.GetRandomBytes(System.Byte[])">
            <summary>
            用随机数填充指定字节数组的元素。
            </summary>
            <param name="buffer">包含随机数的字节数组。</param>
        </member>
        <member name="T:GameFramework.Utility.Text">
            <summary>
            字符相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Text.Format(System.String,System.Object)">
            <summary>
            获取格式化字符串。
            </summary>
            <param name="format">字符串格式。</param>
            <param name="arg0">字符串参数 0。</param>
            <returns>格式化后的字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Text.Format(System.String,System.Object,System.Object)">
            <summary>
            获取格式化字符串。
            </summary>
            <param name="format">字符串格式。</param>
            <param name="arg0">字符串参数 0。</param>
            <param name="arg1">字符串参数 1。</param>
            <returns>格式化后的字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Text.Format(System.String,System.Object,System.Object,System.Object)">
            <summary>
            获取格式化字符串。
            </summary>
            <param name="format">字符串格式。</param>
            <param name="arg0">字符串参数 0。</param>
            <param name="arg1">字符串参数 1。</param>
            <param name="arg2">字符串参数 2。</param>
            <returns>格式化后的字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Text.Format(System.String,System.Object[])">
            <summary>
            获取格式化字符串。
            </summary>
            <param name="format">字符串格式。</param>
            <param name="args">字符串参数。</param>
            <returns>格式化后的字符串。</returns>
        </member>
        <member name="M:GameFramework.Utility.Text.GetFullName``1(System.String)">
            <summary>
            根据类型和名称获取完整名称。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="name">名称。</param>
            <returns>完整名称。</returns>
        </member>
        <member name="M:GameFramework.Utility.Text.GetFullName(System.Type,System.String)">
            <summary>
            根据类型和名称获取完整名称。
            </summary>
            <param name="type">类型。</param>
            <param name="name">名称。</param>
            <returns>完整名称。</returns>
        </member>
        <member name="T:GameFramework.Utility.Verifier">
            <summary>
            校验相关的实用函数。
            </summary>
        </member>
        <member name="T:GameFramework.Utility.Verifier.Crc32">
            <summary>
            CRC32 算法。
            </summary>
        </member>
        <member name="F:GameFramework.Utility.Verifier.Crc32.DefaultPolynomial">
            <summary>
            默认多项式。
            </summary>
        </member>
        <member name="F:GameFramework.Utility.Verifier.Crc32.DefaultSeed">
            <summary>
            默认种子数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Verifier.Crc32.#ctor">
            <summary>
            初始化 CRC32 类的新实例。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Verifier.Crc32.#ctor(System.UInt32,System.UInt32)">
            <summary>
            初始化 CRC32 类的新实例。
            </summary>
            <param name="polynomial">指定的多项式。</param>
            <param name="seed">指定的种子数。</param>
        </member>
        <member name="M:GameFramework.Utility.Verifier.Crc32.Initialize">
            <summary>
            初始化 Crc32 类的实现。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Verifier.Crc32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将写入对象的数据路由到哈希算法以计算哈希值。
            </summary>
            <param name="array">要计算其哈希代码的输入。</param>
            <param name="ibStart">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="cbSize">字节数组中用作数据的字节数。</param>
        </member>
        <member name="M:GameFramework.Utility.Verifier.Crc32.HashFinal">
            <summary>
            在加密流对象处理完最后的数据后完成哈希计算。
            </summary>
            <returns>计算所得的哈希代码。</returns>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetCrc32(System.Byte[])">
            <summary>
            计算二进制流的 CRC32。
            </summary>
            <param name="bytes">指定的二进制流。</param>
            <returns>计算后的 CRC32。</returns>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetCrc32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算二进制流的 CRC32。
            </summary>
            <param name="bytes">指定的二进制流。</param>
            <param name="offset">二进制流的偏移。</param>
            <param name="length">二进制流的长度。</param>
            <returns>计算后的 CRC32。</returns>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetCrc32(System.IO.Stream)">
            <summary>
            计算二进制流的 CRC32。
            </summary>
            <param name="stream">指定的二进制流。</param>
            <returns>计算后的 CRC32。</returns>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetMD5(System.Byte[])">
            <summary>
            计算二进制流的 MD5。
            </summary>
            <param name="bytes">指定的二进制流。</param>
            <returns>计算后的 MD5。</returns>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetMD5(System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算二进制流的 MD5。
            </summary>
            <param name="bytes">指定的二进制流。</param>
            <param name="offset">二进制流的偏移。</param>
            <param name="length">二进制流的长度。</param>
            <returns>计算后的 MD5。</returns>
        </member>
        <member name="M:GameFramework.Utility.Verifier.GetMD5(System.IO.Stream)">
            <summary>
            计算二进制流的 MD5。
            </summary>
            <param name="stream">指定的二进制流。</param>
            <returns>计算后的 MD5。</returns>
        </member>
        <member name="T:GameFramework.Utility.Zip">
            <summary>
            压缩解压缩相关的实用函数。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Zip.SetZipHelper(GameFramework.Utility.Zip.IZipHelper)">
            <summary>
            设置压缩解压缩辅助器。
            </summary>
            <param name="zipHelper">要设置的压缩解压缩辅助器。</param>
        </member>
        <member name="M:GameFramework.Utility.Zip.Compress(System.Byte[])">
            <summary>
            压缩数据。
            </summary>
            <param name="bytes">要压缩的数据的二进制流。</param>
            <returns>压缩后的数据的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Compress(System.Byte[],System.IO.Stream)">
            <summary>
            压缩数据。
            </summary>
            <param name="bytes">要压缩的数据的二进制流。</param>
            <param name="compressedStream">压缩后的数据的二进制流。</param>
            <returns>是否压缩数据成功。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Compress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            压缩数据。
            </summary>
            <param name="bytes">要压缩的数据的二进制流。</param>
            <param name="offset">要压缩的数据的二进制流的偏移。</param>
            <param name="length">要压缩的数据的二进制流的长度。</param>
            <returns>压缩后的数据的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Compress(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            压缩数据。
            </summary>
            <param name="bytes">要压缩的数据的二进制流。</param>
            <param name="offset">要压缩的数据的二进制流的偏移。</param>
            <param name="length">要压缩的数据的二进制流的长度。</param>
            <param name="compressedStream">压缩后的数据的二进制流。</param>
            <returns>是否压缩数据成功。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Decompress(System.Byte[])">
            <summary>
            解压缩数据。
            </summary>
            <param name="bytes">要解压缩的数据的二进制流。</param>
            <returns>解压缩后的数据的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Decompress(System.Byte[],System.IO.Stream)">
            <summary>
            解压缩数据。
            </summary>
            <param name="bytes">要解压缩的数据的二进制流。</param>
            <param name="decompressedStream">解压缩后的数据的二进制流。</param>
            <returns>是否解压缩数据成功。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Decompress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            解压缩数据。
            </summary>
            <param name="bytes">要解压缩的数据的二进制流。</param>
            <param name="offset">要解压缩的数据的二进制流的偏移。</param>
            <param name="length">要解压缩的数据的二进制流的长度。</param>
            <returns>解压缩后的数据的二进制流。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.Decompress(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            解压缩数据。
            </summary>
            <param name="bytes">要解压缩的数据的二进制流。</param>
            <param name="offset">要解压缩的数据的二进制流的偏移。</param>
            <param name="length">要解压缩的数据的二进制流的长度。</param>
            <param name="decompressedStream">解压缩后的数据的二进制流。</param>
            <returns>是否解压缩数据成功。</returns>
        </member>
        <member name="T:GameFramework.Utility.Zip.IZipHelper">
            <summary>
            压缩解压缩辅助器接口。
            </summary>
        </member>
        <member name="M:GameFramework.Utility.Zip.IZipHelper.Compress(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            压缩数据。
            </summary>
            <param name="bytes">要压缩的数据的二进制流。</param>
            <param name="offset">要压缩的数据的二进制流的偏移。</param>
            <param name="length">要压缩的数据的二进制流的长度。</param>
            <param name="compressedStream">压缩后的数据的二进制流。</param>
            <returns>是否压缩数据成功。</returns>
        </member>
        <member name="M:GameFramework.Utility.Zip.IZipHelper.Decompress(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            解压缩数据。
            </summary>
            <param name="bytes">要解压缩的数据的二进制流。</param>
            <param name="offset">要解压缩的数据的二进制流的偏移。</param>
            <param name="length">要解压缩的数据的二进制流的长度。</param>
            <param name="decompressedStream">解压缩后的数据的二进制流。</param>
            <returns>是否解压缩数据成功。</returns>
        </member>
    </members>
</doc>
